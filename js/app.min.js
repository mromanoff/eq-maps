(function(global) {
    "use strict";
    var App = global.App = {};
    App.IS_DEV = location.hostname.indexOf("local") === 0;
    App.Pages = {};
    App.Components = {};
    App.Events = $({});
    App.Services = {
        findByGeo: "/ESB/FindFacilitiesByGeo"
    };
    App.Events.on("loaded", function() {
        var Router = Backbone.Router.extend({
            _routeToRegExp: function(route) {
                route += "(/)";
                route = Backbone.Router.prototype._routeToRegExp.call(this, route);
                return new RegExp(route.source, "i");
            },
            routes: {
                "": App.Pages.Home.init,
                "Join/Step1": App.Pages.Join.SelectClub.init,
                "Join/Step3": App.Pages.Join.MembershipPurchase.init,
                "Join/thank-you": App.Pages.Join.ThankYouPage.init,
                "Join/:facilityId": App.Pages.Join.SelectMembership.init,
                Login: App.Pages.Login.init,
                "Help/ForgotPassword": App.Pages.Password.Forgot.init,
                "Help/Recover-Password/:token": App.Pages.Password.Reset.init,
                "Help/Change/UserName": App.Pages.User.ChangeUserName.init,
                "help/upgrade/spa-member": App.Pages.User.SpaMemberUpgrade.init,
                "Help/forgotUser": App.Pages.User.Forgot.init,
                "login/connect": App.Pages.ConnnectAccounts.init,
                bookabike: App.Pages.Mock.Book.init,
                "bookabike/detail": App.Pages.Mock.Book.init,
                "Activate/start": App.Pages.Activate.init,
                "activate/email/:guid": App.Pages.OnBoarding.start,
                "Activate/verifyemail/:token": App.Pages.User.VerifyUserName.init,
                "activate/signin": App.Pages.SignIn.init,
                "activate/signin/facebook/email": App.Pages.SignIn.FacebookWithOutEmail.init,
                "activate/signin/equinox": App.Pages.CreateAccount.init,
                "clubs/:region": App.Pages.Clubs.init,
                "clubs/:region/:club": App.Pages.Club.init,
                "clubs/:region/:subregion/:club": App.Pages.Club.init,
                "questionnaire/:step": App.Pages.OnBoarding.init,
                groupfitness: App.Pages.GroupFitness.init,
                "groupfitness/customworkouts": App.Pages.CustomWorkout.init,
                "groupfitness/:id": App.Pages.ClassDetail.init,
                "activity/workouts/:id": App.Pages.WorkoutSummary.init,
                "activity/:shareid/classes/:classinstanceid": App.Pages.WorkoutSummaryShared.init,
                "activity/workout/add-custom(/)": App.Pages.AddCustomWorkout.init,
                "activity/workout/add-custom/:id": App.Pages.AddCustomWorkout.init,
                notifications: App.Pages.Notifications.init,
                rewards: App.Pages.Rewards.init,
                "personal-training/schedule-equifit": App.Pages.ScheduleEquifit.init,
                "patch/cycling": App.Pages.CyclingPatch.init,
                "groupfitness/:id/leaderboard": App.Pages.Leaderboard.init
            }
        });
        App.Router = new Router();
        Backbone.history.start({
            hashChange: false,
            pushState: true
        });
        $.ajaxSetup({
            cache: false
        });
        if (!isDebugging) {
            console.log = function() {};
            Crittercism.init({
                appId: "525628e8a7928a3b36000003",
                appVersion: assemblyVersion + " " + assemblyServer
            });
        } else {
            var mock = function() {
                return this;
            };
            global.Crittercism = {
                logHandledException: mock,
                leaveBreadcrumb: mock,
                setUsername: mock,
                setValue: mock
            };
        }
        App.loadComponent("page-scroll");
        $(document).ajaxError(function(e, xhr) {
            if (user !== null && xhr.status === 401) {
                location.href = "/login?ReturnUrl=" + window.location.pathname;
            }
        });
        if (user === null) {
            EQ.Helpers.user.invalidateFavoritesCache();
        }
        ZeroClipboard.config({
            swfPath: "/assets/ZeroClipboard.swf",
            moviePath: "/assets/ZeroClipboard.swf",
            zIndex: 800,
            forceHandCursor: true
        });
        $("input, textarea").placeholder();
    });
})(window);

(function(global, App) {
    "use strict";
    var Club = App.Pages.Club = {};
    debug("[CLUB DETAIL] page");
    Club.icon = function(facility) {
        return '<div class="custom-marker active"><span class="icon-marker-o"></span><h5>' + facility.ClubName + "</h5></div>";
    };
    Club.onMapsLoaded = function() {
        Club.Map = new EQ.Maps.Map(Club.ui.$mapContainer[0]);
        var region = EQ.Helpers.getRegionByTitle(Club.region);
        if (region) {
            Club.Region.select(region);
        }
        var club = EQ.Helpers.getFacilityById(Club.clubId);
        var marker = Club.Map.markers.find(club.Latitude, club.Longitude);
        Club.Map.fit([ club ], -3);
        if (marker) {
            debug("[ClubDetail] Setting marker open:", marker);
            marker.setAnchor(RichMarkerPosition.TOP);
            marker.setContent(Club.icon(club));
        }
    };
    Club.Club = {
        parse: function(facility) {
            EQ.Helpers.setPositionGetter(facility);
            Club.Map.markers.add({
                lat: facility.Latitude,
                lng: facility.Longitude,
                content: Club.Icon.Marker.regular(),
                click: function() {
                    EQ.Maps.trigger("CLUB_MARKER_CLICK", {
                        facility: facility,
                        marker: this
                    });
                }
            }, true);
            return this;
        },
        showAll: function() {
            if (!this._facilities) {
                var facilities = [];
                $.each(Club.Data, function(i, region) {
                    facilities = facilities.concat(EQ.Helpers.getAllFacilities(region));
                });
                this._facilities = facilities;
            }
            $.each(this._facilities, function(i, club) {
                Club.Club.parse(club);
            });
        }
    };
    Club.Icon = {
        Marker: {
            regular: function() {
                return '<div class="custom-marker"><span class="icon-marker-dot"></span></div>';
            }
        }
    };
    Club.Region = {
        select: function(region) {
            if (!region.bounds) {
                region.bounds = EQ.Maps.Bounds(Club.getChildrenPoints(region));
            }
            this.showClubs(region);
        },
        showClubs: function(region) {
            Club.Map.fitBounds(region.bounds);
            Club.Club.showAll();
        }
    };
    Club.getChildrenPoints = function(region) {
        var that = this, points = [];
        if (region.SubRegions && region.SubRegions.length) {
            $.each(region.SubRegions, function(i, subregion) {
                points = points.concat(that.getChildrenPoints(subregion));
            });
        } else if (region.Facilities.length) {
            points = $.map(region.Facilities, function(club) {
                if (club.Latitude && club.Longitude) {
                    return EQ.Maps.Point({
                        lat: club.Latitude,
                        lng: club.Longitude
                    });
                } else {
                    console.error("A club doesn't have Lat Lng properties.", club);
                }
            });
        }
        return points;
    };
    Club.toggleMapContainer = function(e) {
        e.preventDefault();
        $(e.currentTarget).closest(".club-finder-map").children("div").toggle();
        if (!this.mapLoaded) {
            EQ.Maps.Load(this.onMapsLoaded);
            this.mapLoaded = true;
        }
    };
    Club.events = function() {
        this.ui.$toggleMapContainer.on("click", _.bind(this.toggleMapContainer, this));
    };
    Club.ui = {
        $mapContainer: $(".map-container"),
        $toggleMapContainer: $(".toggleMapContainer")
    };
    Club.init = function(region, subregion, club) {
        debug("[ClubDetail] init:", region, subregion, club);
        Club.region = region;
        Club.Data = global.allRegionsData;
        Club.mapLoaded = false;
        Club.clubId = currentClub;
        Club.events();
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var Clubs = App.Pages.Clubs = {};
    debug("[CLUBS] page");
    Clubs.Club = {
        parse: function(facility) {
            EQ.Helpers.setPositionGetter(facility);
            Clubs.Map.markers.add({
                lat: facility.Latitude,
                lng: facility.Longitude,
                content: Clubs.Icon.Marker.regular(),
                click: function() {
                    EQ.Maps.trigger("CLUB_MARKER_CLICK", {
                        facility: facility,
                        marker: this
                    });
                }
            }, true);
            return this;
        },
        showAll: function() {
            if (!this._facilities) {
                var facilities = [];
                $.each(Clubs.Data, function(i, region) {
                    facilities = facilities.concat(EQ.Helpers.getAllFacilities(region));
                });
                this._facilities = facilities;
            }
            $.each(this._facilities, function(i, club) {
                Clubs.Club.parse(club);
            });
        },
        getLink: function(facility) {
            return facility.URL || "/clubs/" + facility.ShortName;
        }
    };
    Clubs.Icon = {
        Marker: {
            regular: function() {
                return '<div class="custom-marker"><span class="icon-marker-dot"></span></div>';
            }
        }
    };
    Clubs.onMapsLoaded = function() {
        Clubs.Map = new EQ.Maps.Map(Clubs.ui.$mapContainer[0]);
        var region = EQ.Helpers.getRegionByTitle($(".clubs-region").data("region"));
        if (region) {
            Clubs.Region.select(region);
        }
    };
    Clubs.Region = {
        select: function(region) {
            if (!region.bounds) {
                region.bounds = EQ.Maps.Bounds(Clubs.getChildrenPoints(region));
            }
            this.showClubs(region);
        },
        showClubs: function(region) {
            Clubs.Map.fitBounds(region.bounds);
            Clubs.Club.showAll();
        }
    };
    Clubs.getChildrenPoints = function(region) {
        var that = this, points = [];
        if (region.SubRegions && region.SubRegions.length) {
            $.each(region.SubRegions, function(i, subregion) {
                points = points.concat(that.getChildrenPoints(subregion));
            });
        } else if (region.Facilities.length) {
            points = $.map(region.Facilities, function(club) {
                if (club.Latitude && club.Longitude) {
                    return EQ.Maps.Point({
                        lat: club.Latitude,
                        lng: club.Longitude
                    });
                } else {
                    console.error("A club doesn't have Lat Lng properties.", club);
                }
            });
        }
        return points;
    };
    Clubs.toggleMapContainer = function(e) {
        e.preventDefault();
        $(e.currentTarget).closest(".club-finder-map").children("div").toggle();
        if (!this.mapLoaded) {
            EQ.Maps.Load(this.onMapsLoaded);
            this.mapLoaded = true;
        }
    };
    Clubs.events = function() {
        this.ui.$toggleMapContainer.on("click", _.bind(this.toggleMapContainer, this));
    };
    Clubs.ui = {
        $mapContainer: $(".map-container"),
        $toggleMapContainer: $(".toggleMapContainer")
    };
    Clubs.init = function() {
        Clubs.Data = global.allRegionsData;
        Clubs.mapLoaded = false;
        Clubs.events();
    };
})(window, window.App);

(function(App) {
    "use strict";
    var isLocal = location.host.indexOf("local.equinox.com") === 0 || location.host.indexOf("local-web.equinox.com") === 0 ? true : false;
    var assetBaseUrl = $("body").data("asset-base-url") || "", version = $("body").data("app-version") ? "?v=" + $("body").data("app-version") : "";
    var createComponent = function(component, $el, options) {
        try {
            return App.Components[component]($el, options);
        } catch (e) {
            console.error("data-component failed to export as a function", e.stack);
        }
    };
    App.renderComponents = function(selector) {
        var $selector = $(selector), components = [], requireComponents = [];
        $selector.find("[data-component]").each(function(i, el) {
            var $el = $(el), component = $el.data("component"), options = $el.data("component-options"), devAssets = assetBaseUrl + "/assets/js/app/components/" + component + ".js" + version, prodAssets = assetBaseUrl + "/assets/js/app/components/min/" + component + ".js" + version;
            try {
                debug("[DataComponent] Loading: " + component + " component.");
                var C = {
                    filename: isLocal ? devAssets : prodAssets,
                    $el: $el,
                    component: component,
                    options: options
                };
                components.push(C);
                requireComponents.push(C.filename);
            } catch (e) {
                console.error("data-component not found: " + component, e.stack);
            }
        });
        try {
            require(requireComponents, function() {
                _.forEach(components, function(c) {
                    createComponent(c.component, c.$el, c.options || {});
                });
            });
        } catch (e) {
            console.error("data-component not found", e.stack);
        }
    };
    App.loadComponent = function(component, $el, options, callback) {
        debug("[DataComponent] Loading: " + component + " component.");
        require([ assetBaseUrl + "/assets/js/app/components/min/" + component + ".js" + version ], function() {
            createComponent(component, $el, options || {});
            if (callback && typeof callback === "function") {
                callback.call(component);
            }
        });
    };
    App.renderComponents("body");
    _.extend(Backbone.View.prototype, Backbone.Events, {
        renderComponents: function($el) {
            App.renderComponents($el);
        }
    });
})(window.App);

window.App.Events.trigger("loaded");

(function() {
    "use strict";
    $(function() {
        if (EQ.Helpers.getDevicePlatform() === "android") {
            $("input[maxlength]").each(function() {
                var $input = $(this), max = $input.attr("maxlength");
                $input.removeAttr("maxlength");
                $input.on("keydown", function(evt) {
                    var ignore = [ 8, 9, 13, 33, 34, 35, 36, 37, 38, 39, 40, 46 ], isExtraKey = evt.altKey || evt.ctrlKey;
                    if ($.inArray(evt.keyCode, ignore) === -1 && !isExtraKey) {
                        return $input.val().length < max;
                    }
                });
                $input.on("keyup", function() {
                    var value = $input.val();
                    if (value.length > max) {
                        $input.val(value.substr(0, max));
                    }
                });
            });
        }
        if (window.location.hash === "#flushGeoCache") {
            EQ.Geo.flushCache();
            console.log("[GLOBAL] Flushing Geo Cache");
        }
        EQ.Helpers.fixRegionProperty();
        $('iframe[title="Google conversion frame"]').css("display", "none");
    });
})(window);
//# sourceMappingURL=app.min.js.map
/*! local_env equinox_maps v1.0.0 - 2015-03-01 05:03:22 */
