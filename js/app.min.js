(function(global) {
    "use strict";
    var App = global.App = {};
    App.IS_DEV = location.hostname.indexOf("local") === 0;
    App.Pages = {};
    App.Components = {};
    App.Events = $({});
    App.Services = {
        findByGeo: "/ESB/FindFacilitiesByGeo"
    };
    App.Events.on("loaded", function() {
        var Router = Backbone.Router.extend({
            _routeToRegExp: function(route) {
                route += "(/)";
                route = Backbone.Router.prototype._routeToRegExp.call(this, route);
                return new RegExp(route.source, "i");
            },
            routes: {
                "": App.Pages.Home.init,
                "Join/Step1": App.Pages.Join.SelectClub.init,
                "Join/Step3": App.Pages.Join.MembershipPurchase.init,
                "Join/thank-you": App.Pages.Join.ThankYouPage.init,
                "Join/:facilityId": App.Pages.Join.SelectMembership.init,
                Login: App.Pages.Login.init,
                "Help/ForgotPassword": App.Pages.Password.Forgot.init,
                "Help/Recover-Password/:token": App.Pages.Password.Reset.init,
                "Help/Change/UserName": App.Pages.User.ChangeUserName.init,
                "help/upgrade/spa-member": App.Pages.User.SpaMemberUpgrade.init,
                "Help/forgotUser": App.Pages.User.Forgot.init,
                "login/connect": App.Pages.ConnnectAccounts.init,
                bookabike: App.Pages.Mock.Book.init,
                "bookabike/detail": App.Pages.Mock.Book.init,
                "Activate/start": App.Pages.Activate.init,
                "activate/email/:guid": App.Pages.OnBoarding.start,
                "Activate/verifyemail/:token": App.Pages.User.VerifyUserName.init,
                "activate/signin": App.Pages.SignIn.init,
                "activate/signin/facebook/email": App.Pages.SignIn.FacebookWithOutEmail.init,
                "activate/signin/equinox": App.Pages.CreateAccount.init,
                "clubs/:region": App.Pages.Clubs.init,
                "clubs/:region/:club": App.Pages.Club.init,
                "clubs/:region/:subregion/:club": App.Pages.Club.init,
                "questionnaire/:step": App.Pages.OnBoarding.init,
                groupfitness: App.Pages.GroupFitness.init,
                "groupfitness/customworkouts": App.Pages.CustomWorkout.init,
                "groupfitness/:id": App.Pages.ClassDetail.init,
                "activity/workouts/:id": App.Pages.WorkoutSummary.init,
                "activity/:shareid/classes/:classinstanceid": App.Pages.WorkoutSummaryShared.init,
                "activity/workout/add-custom(/)": App.Pages.AddCustomWorkout.init,
                "activity/workout/add-custom/:id": App.Pages.AddCustomWorkout.init,
                notifications: App.Pages.Notifications.init,
                rewards: App.Pages.Rewards.init,
                "personal-training/schedule-equifit": App.Pages.ScheduleEquifit.init,
                "patch/cycling": App.Pages.CyclingPatch.init,
                "groupfitness/:id/leaderboard": App.Pages.Leaderboard.init
            }
        });
        App.Router = new Router();
        Backbone.history.start({
            hashChange: false,
            pushState: true
        });
        $.ajaxSetup({
            cache: false
        });
        if (!isDebugging) {
            console.log = function() {};
            Crittercism.init({
                appId: "525628e8a7928a3b36000003",
                appVersion: assemblyVersion + " " + assemblyServer
            });
        } else {
            var mock = function() {
                return this;
            };
            global.Crittercism = {
                logHandledException: mock,
                leaveBreadcrumb: mock,
                setUsername: mock,
                setValue: mock
            };
        }
        App.loadComponent("page-scroll");
        $(document).ajaxError(function(e, xhr) {
            if (user !== null && xhr.status === 401) {
                location.href = "/login?ReturnUrl=" + window.location.pathname;
            }
        });
        if (user === null) {
            EQ.Helpers.user.invalidateFavoritesCache();
        }
        ZeroClipboard.config({
            swfPath: "/assets/ZeroClipboard.swf",
            moviePath: "/assets/ZeroClipboard.swf",
            zIndex: 800,
            forceHandCursor: true
        });
        $("input, textarea").placeholder();
    });
})(window);

(function(global, App) {
    "use strict";
    var HELPERS = window.EQ.Helpers || {}, Activate = App.Pages.Activate = {}, $activateForm = $(".activate-user");
    Activate.init = function() {
        debug("[Activate] Init");
        Activate.setCookie();
        Activate.bind();
    };
    Activate.setCookie = function() {
        if (HELPERS.getQueryStringVariable("fromios") === "true") {
            debug("[Activate] Cookie");
            HELPERS.createCookie("from_ios", true);
        }
    };
    Activate.bind = function() {
        var that = Activate;
        $activateForm.on("submit", function(e) {
            e.preventDefault();
            that.validateAndSubmit();
        });
    };
    Activate.validateAndSubmit = function() {
        if ($activateForm.data("publicMethods").isValid()) {
            $activateForm.data("publicMethods").sendAjaxRequest({
                country: "ActivateUser.Country",
                barcode: "ActivateUser.Barcode",
                lastName: "ActivateUser.LastName"
            }, function(data) {
                var $form = $("<form></form>");
                $form.attr("action", "/activate/signin").attr("method", "POST");
                var $firstName = $('<input type="hidden"/>').attr("name", "FirstName").val(data.firstName);
                var $email = $('<input type="hidden"/>').attr("name", "Email").val(data.emailAddress);
                var $country = $('<input type="hidden"/>').attr("name", "LastName").val($activateForm.find('input[name="ActivateUser.LastName"]').val());
                var $lastName = $('<input type="hidden"/>').attr("name", "Country").val($activateForm.find('select[name="ActivateUser.Country"]').val());
                var $barcode = $('<input type="hidden"/>').attr("name", "Barcode").val($activateForm.find('input[name="ActivateUser.Barcode"]').val());
                $form.append($country);
                $form.append($firstName);
                $form.append($lastName);
                $form.append($email);
                $form.append($barcode);
                $form.css("display", "none");
                $("body").append($form);
                $form.submit();
            });
        }
    };
})(window, window.App);

(function(App) {
    "use strict";
    var AddCustomWorkout = App.Pages.AddCustomWorkout = {};
    var $dayField = $('[data-type="date"]');
    var $daylabel = $(".dropdown.date .option");
    var $monthField = $('[data-type="month"]');
    var $monthLabel = $(".dropdown.month .option");
    var $yearField = $('[data-type="year"]');
    var $yearLabel = $(".dropdown.year .option");
    var $minutesField = $('[data-type="minutes"]');
    var $hoursField = $('[data-type="hour"]');
    var $activitiesField = $('[data-type="activities"]');
    var $distanceUnitField = $('[data-type="unit"]');
    var $instructorField = $("#workoout-instructor");
    var $caloriesField = $("#workoout-calories");
    var $distanceField = $("#workoout-distance");
    var $hiddenFieldSet = $(".hidden-fields fieldset");
    var $notesField = $("#workoout-notes");
    var $workoutDuration = $("#workout-duration");
    var $workoutDurationMobileInput = $("#workout-duration-mobile");
    var $customNameField = $("#custom-name");
    var $cancelButton = $("#cancel-bttn");
    var $toggle = $(".toggle-am-pm");
    var $submit = $("#submit-bttn");
    var _collectedData = {};
    var errorHandler;
    var $errorArea = $(".error-area");
    var _workoutObjects;
    var _workoutID;
    var _isOcrWorkout = false;
    var _editMode = false;
    var $durationMobile = $(".duration-radio");
    AddCustomWorkout.init = function(id) {
        console.log(id);
        if (!_.isNull(id)) {
            _workoutID = id;
            _editMode = true;
            $("#page-title").html("EDIT ACTIVITY");
            $submit.html("SAVE CHANGES");
        }
        errorHandler = EQ.Helpers.loaderAndErrorHandler($errorArea, {
            type: "button",
            color: "black",
            errorTitle: "ERROR"
        });
        if (!_editMode) {
            AddCustomWorkout.setDate();
            AddCustomWorkout.setTime();
        } else {
            AddCustomWorkout.getWorkouts();
        }
        $dayField.change(AddCustomWorkout.updateDropdown);
        $monthField.change(AddCustomWorkout.updateDropdown);
        $yearField.change(AddCustomWorkout.updateDropdown);
        $minutesField.change(AddCustomWorkout.updateDropdown);
        $hoursField.change(AddCustomWorkout.updateDropdown);
        $activitiesField.change(AddCustomWorkout.updateDropdown);
        $instructorField.change(AddCustomWorkout.updateDropdown);
        $toggle.click(AddCustomWorkout.toggleClick);
        $submit.click(AddCustomWorkout.validateData);
        $durationMobile.click(AddCustomWorkout.renderDurationMobile);
        $workoutDuration.keyup(AddCustomWorkout.onlyNums);
        $workoutDurationMobileInput.keyup(AddCustomWorkout.onlyNums);
        $caloriesField.keyup(AddCustomWorkout.onlyNums);
        $distanceField.keyup(AddCustomWorkout.onlyNums);
        $notesField.change(AddCustomWorkout.updateCountdown);
        $notesField.keyup(AddCustomWorkout.updateCountdown);
        $customNameField.change(AddCustomWorkout.updateDropdown);
        $distanceUnitField.change(AddCustomWorkout.updateDropdown);
        $cancelButton.on("click", AddCustomWorkout.cancel);
    };
    AddCustomWorkout.updateCountdown = function() {
        var remaining = 300 - $notesField.val().length;
        $("#countdown").text(remaining);
    };
    AddCustomWorkout.setDate = function() {
        var date = new Date().getDate();
        var month = new Date().getMonth();
        var year = new Date().getFullYear();
        var monthName = [ "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" ];
        $dayField.val(date.toString());
        $daylabel.html(date);
        $monthField.val((month + 1).toString());
        $monthLabel.html(monthName[month]);
        $yearField.val(year.toString());
        $yearLabel.html(year);
        AddCustomWorkout.getWorkouts();
    };
    AddCustomWorkout.setTime = function() {
        var dt = moment().subtract(30, "minutes");
        var hour = dt.hours();
        var min = dt.minutes();
        $toggle.removeClass("off").addClass("on");
        if (hour >= 12) {
            hour = hour - 12;
            $toggle.removeClass("on").addClass("off");
        }
        hour = hour === 0 ? 12 : hour;
        hour = hour < 10 ? "0" + hour : hour;
        $hoursField.find("option[value=" + hour + "]").prop("selected", true);
        $hoursField.parent().find(".option").text(hour);
        $minutesField.find("option[value=" + min + "]").prop("selected", true);
        $minutesField.parent().find(".option").text(min);
    };
    AddCustomWorkout.updateDropdown = function() {
        var value = $(this).val();
        console.log(value);
        var label = $(this).parent().find(".option");
        if ($(this).attr("data-type") === "month") {
            value = $(this).find("option:selected").text();
        }
        if ($(this).attr("data-type") === "unit") {
            value = $(this).find("option:selected").text();
        }
        if (value !== "select activity") {
            if ($(this).attr("data-type") === "activities") {
                $hiddenFieldSet.addClass("active");
                console.log("drop", $(this).find("option:selected"));
                AddCustomWorkout.setUpHiddenFields($(this).find("option:selected"));
            }
        } else {
            $hiddenFieldSet.removeClass("active");
        }
        label.html(value);
    };
    AddCustomWorkout.setUpHiddenFields = function($option) {
        var showDistance = $option.data("distance"), showName = $option.data("name"), showNotes = $option.data("notes"), showTrainer = $option.data("trainer");
        $("#distance-holder").addClass("hidden");
        $("#distance-type-holder").addClass("hidden");
        $("#custom-nameHolder").addClass("hidden");
        $("#workout-notes").addClass("hidden");
        $("#instructor-holder").addClass("hidden");
        $("#calories-holder").removeClass("half").addClass("full");
        if (showDistance && showDistance === true) {
            $("#distance-holder").removeClass("hidden");
            $("#distance-type-holder").removeClass("hidden");
            $("#calories-holder").removeClass("full").addClass("half");
        }
        if (showName && showName === true) {
            $("#custom-nameHolder").removeClass("hidden");
        }
        if (showNotes && showNotes === true) {
            $("#workout-notes").removeClass("hidden");
        }
        if (showTrainer && showTrainer === true) {
            $("#instructor-holder").removeClass("hidden");
            $("#calories-holder").removeClass("full").addClass("half");
        }
    };
    AddCustomWorkout.onlyNums = function() {
        if (this.id === "workoout-distance") {
            this.value = this.value.replace(/[^0-9\.]/g, "");
            if (this.value === ".") {
                this.value = "";
            }
        } else {
            this.value = this.value.replace(/\D/g, "");
        }
    };
    AddCustomWorkout.toggleClick = function(e) {
        e.preventDefault();
        $toggle.toggleClass("on").toggleClass("off");
    };
    AddCustomWorkout.renderDurationMobile = function(e) {
        e.preventDefault();
        $(this).find("span").removeClass("active");
        $(".workout-duration-other").addClass("is-hidden");
        var val = $(e.target).attr("class");
        if (val !== "duration-radio") {
            $(e.target).addClass("active");
        }
        if (val === "other") {
            $(".workout-duration-other").removeClass("is-hidden");
        }
    };
    AddCustomWorkout.getDurationVal = function() {
        if ($(".duration-holder.is-desktop").is(":visible") && !$(".duration-holder.is-desktop").is(":hidden")) {
            return $workoutDuration.val() !== "" ? $workoutDuration.val() : false;
        } else if ($(".duration-holder.is-mobile").is(":visible") && !$(".duration-holder.is-mobile").is(":hidden")) {
            if ($(".duration-holder.is-mobile").find("span.minuteTab").hasClass("active")) {
                return $(".duration-holder.is-mobile").find("span.active").data("durationVal");
            } else if ($(".duration-holder.is-mobile").find("span.other").hasClass("active")) {
                return $("#workout-duration-mobile").val() !== "" ? $("#workout-duration-mobile").val() : false;
            } else {
                return false;
            }
        }
    };
    AddCustomWorkout.validateData = function() {
        console.log("VALIDATE");
        var failedFields = 0;
        if (AddCustomWorkout.getDurationVal() === false) {
            $(".duration-holder").addClass("error");
            failedFields++;
        } else {
            $(".duration-holder").removeClass("error");
        }
        if ($activitiesField.val() === "select activity") {
            $activitiesField.parent().parent().addClass("error");
            failedFields++;
        } else {
            $activitiesField.parent().parent().removeClass("error");
        }
        if (failedFields === 0) {
            AddCustomWorkout.collectData();
        }
    };
    AddCustomWorkout.collectData = function() {
        var $option = $('[data-type="activities"]').find("option:selected"), showDistance = $option.data("distance"), showNotes = $option.data("notes"), showTrainer = $option.data("trainer");
        console.log("COLLECT DATA");
        _collectedData.workoutName = $activitiesField.val().toLowerCase() === "custom" ? $customNameField.val() !== "" ? $customNameField.val() : $activitiesField.val() : $activitiesField.val();
        _collectedData.startDate = AddCustomWorkout.getDateString();
        _collectedData.endDate = AddCustomWorkout.getWorkoutEnd(_collectedData.startDate);
        _collectedData.workoutCategory = $activitiesField.val().replace(/,/g, "").replace(/ /g, "").toLowerCase() === "custom" ? "CustomEqCustomWorkout" : $activitiesField.val().replace(/,/g, "").replace(/ /g, "");
        _collectedData.calories = $caloriesField.val();
        if (showDistance) {
            _collectedData.distance = $distanceField.val();
        } else {
            _collectedData.distance = null;
        }
        if (!$("#distance-type-holder").hasClass("hidden")) {
            _collectedData.distanceUnit = $distanceUnitField.val();
        }
        if (showNotes) {
            _collectedData.notes = $notesField.val();
        } else {
            _collectedData.notes = null;
        }
        _collectedData.timezone = "";
        if (showTrainer) {
            _collectedData.trainerName = $instructorField.val();
        } else {
            _collectedData.trainerName = null;
        }
        AddCustomWorkout.saveData();
        console.log(_collectedData);
    };
    AddCustomWorkout.getDateString = function() {
        var day = $dayField.val();
        var month = $monthField.val();
        var year = $yearField.val();
        var hour = $hoursField.val();
        var minute = $minutesField.val();
        var isPM = $toggle.hasClass("off") ? true : false;
        hour = hour.replace(/^0+/, "");
        if (!isPM) {
            if (hour === "12") {
                hour = "0";
            }
        } else {
            if (parseInt(hour, 10) < 12) {
                hour = parseInt(hour, 10);
                hour = hour + 12;
            }
        }
        function padzero(n) {
            return n < 10 ? "0" + n : n;
        }
        function toISOString() {
            return year + "-" + padzero(month) + "-" + padzero(day) + "T" + padzero(hour) + ":" + minute + ":00:00";
        }
        return toISOString();
    };
    AddCustomWorkout.calculateDuration = function(start, end) {
        var diffMins = moment(end).diff(start, "minutes");
        console.log(start, end);
        return diffMins;
    };
    AddCustomWorkout.getWorkoutEnd = function(start) {
        var duration = parseInt(AddCustomWorkout.getDurationVal(), 10);
        start = start.substring(0, start.length - 3);
        start = moment(start).add(duration, "minutes").format();
        start = start.substring(0, start.length - 6) + ":00";
        return start;
    };
    AddCustomWorkout.renderWorkouts = function() {
        var thisMany = _workoutObjects.length;
        var options = "";
        var i = 0;
        for (;i < thisMany; i += 1) {
            var thisObj = _workoutObjects[i];
            options += '<option data-is-ocr="' + !!thisObj.isOcrWorkout + '" data-is-custom-workout="' + !!thisObj.isCustomWorkout + '" data-distance="' + thisObj.displayDistanceInput + '" data-calories="' + thisObj.displayCaloriesInput + '" data-name="' + thisObj.displayNameInput + '" data-notes="' + thisObj.displayNotesInput + '" data-trainer="' + thisObj.displayTrainerInput + '" value="' + thisObj.name + '">' + thisObj.name + "</option>";
        }
        $activitiesField.append(options);
        if (_editMode) {
            AddCustomWorkout.getWorkoutObject();
        }
    };
    AddCustomWorkout.parseLoadedStartDate = function(start) {
        function padzero(n) {
            return n < 10 ? "0" + n : n;
        }
        var correctHour = moment(start).hours();
        var correctMinute = moment(start).minute();
        if (correctHour > 11) {
            console.log("correctHour :: ", correctHour);
            $toggle.toggleClass("on").toggleClass("off");
            correctHour = correctHour - 12;
        }
        correctMinute = padzero(correctMinute);
        correctHour = padzero(correctHour);
        var dateObj = {
            day: moment(start).date(),
            month: moment(start).month() + 1,
            year: moment(start).year(),
            hour: correctHour,
            minute: correctMinute
        };
        console.log(dateObj);
        return dateObj;
    };
    AddCustomWorkout.populateWorkoutFields = function() {
        var duration = AddCustomWorkout.calculateDuration(_collectedData.startDate, _collectedData.endDate);
        var loadedStartDateObj = AddCustomWorkout.parseLoadedStartDate(_collectedData.startDate);
        if (_collectedData.workoutCategory === 204 && _collectedData.workoutSubCategoryId === 17) {
            _collectedData.workoutCustomName = _collectedData.workoutName;
            _collectedData.workoutName = "Custom";
            $activitiesField.val(_collectedData.workoutName);
            $activitiesField.parent().find(".option").html(_collectedData.workoutName);
        } else {
            $activitiesField.val(_collectedData.workoutName);
            $activitiesField.parent().find(".option").html(_collectedData.workoutName);
            if (_collectedData.eventType === "OCR") {
                _isOcrWorkout = true;
                $activitiesField.find('[data-is-ocr="false"]').remove();
            } else {
                $activitiesField.find('[data-is-custom-workout="false"]').remove();
            }
        }
        if (_collectedData.workoutCustomName) {
            $customNameField.val(_collectedData.workoutCustomName);
        }
        $hiddenFieldSet.addClass("active");
        AddCustomWorkout.setUpHiddenFields($activitiesField.find("option:selected"));
        $distanceField.val(_collectedData.distance);
        $distanceUnitField.find('[data-unit="' + _collectedData.distanceUnit + '"]').attr("selected", true);
        $distanceUnitField.trigger("change");
        if ($(".duration-holder.is-desktop").is(":visible") && !$(".duration-holder.is-desktop").is(":hidden")) {
            $workoutDuration.val(duration);
        } else if ($(".duration-holder.is-mobile").is(":visible") && !$(".duration-holder.is-mobile").is(":hidden")) {
            var checkClass = false;
            $(".duration-holder.is-mobile span.minuteTab").each(function() {
                if ($(this).data("durationVal") === duration) {
                    $(this).addClass("active");
                    checkClass = true;
                }
            });
            if (checkClass !== true) {
                $(".duration-holder.is-mobile span.other").addClass("active");
                $(".workout-duration-other").removeClass("is-hidden");
                $(".workout-duration-other input").val(duration);
            }
        }
        $notesField.val(_collectedData.notes);
        $dayField.val(loadedStartDateObj.day);
        $daylabel.html(loadedStartDateObj.day);
        $monthField.val(loadedStartDateObj.month);
        $monthLabel.html(loadedStartDateObj.month);
        $yearField.val(loadedStartDateObj.year);
        $yearLabel.html(loadedStartDateObj.year);
        $caloriesField.val(_collectedData.calories);
        $instructorField.val(_collectedData.trainerName);
        var hour = parseInt(loadedStartDateObj.hour, 10);
        console.log("HOUR :: " + hour);
        if (hour === 0) {
            hour = "12";
        }
        if (hour < 10) {
            hour = "0" + hour;
        }
        $hoursField.val(hour);
        $hoursField.parent().find(".option").html(hour);
        $minutesField.val(loadedStartDateObj.minute);
        $minutesField.parent().find(".option").html(loadedStartDateObj.minute);
        AddCustomWorkout.updateCountdown();
    };
    AddCustomWorkout.saveData = function() {
        console.log("SAVE!");
        errorHandler.showLoader();
        var ENDPOINT;
        var METHOD;
        if (!_editMode) {
            ENDPOINT = APIEndpoint26 + "/me/workouts/custom-workout";
            METHOD = "POST";
        } else {
            ENDPOINT = APIEndpoint26 + "/me/workouts/" + _workoutID + "/" + _isOcrWorkout + "/custom-workout";
            METHOD = "PUT";
        }
        $.ajax({
            type: METHOD,
            url: ENDPOINT,
            contentType: "application/json",
            dataType: "json",
            xhrFields: {
                withCredentials: true
            },
            data: JSON.stringify(_collectedData)
        }).done(function(data) {
            console.log("saveData", data);
            console.log("[ADD CUSTOM WORKOUT OK]", data.workout.id);
            errorHandler.hideLoader();
            window.location.href = "/activity/workouts/" + data.workout.id;
        }).fail(function(d) {
            console.log("server error", d.responseJSON);
            errorHandler.showError();
        }).always(function() {
            errorHandler.hideLoader();
        });
    };
    AddCustomWorkout.getWorkouts = function() {
        console.log("GETTING WORKOUTS!");
        errorHandler.showLoader();
        var ENDPOINT = APIEndpoint26 + "/workouts/categories", ENDPOINT_UOM = APIEndpoint26 + "/me/profile/unitofmeasure";
        $.when($.ajax({
            type: "GET",
            url: ENDPOINT_UOM,
            contentType: "application/json",
            dataType: "json",
            xhrFields: {
                withCredentials: true
            }
        }), $.ajax({
            type: "GET",
            url: ENDPOINT,
            contentType: "application/json",
            dataType: "json",
            xhrFields: {
                withCredentials: true
            }
        })).done(function(umodata, workoutdata) {
            console.log(umodata[0], workoutdata[0]);
            var data = [], distanceUnit = "miles";
            workoutdata[0].forEach(function(category) {
                category.workoutSubCategories.forEach(function(subcat) {
                    subcat.id = subcat.subCategoryId;
                    subcat.name = subcat.subCategoryName;
                    data.push(subcat);
                });
            });
            if (umodata[0].unitOfMeasure === "Metric") {
                distanceUnit = "km";
            }
            $distanceUnitField.find('[data-unit="' + distanceUnit + '"]').attr("selected", true);
            $distanceUnitField.trigger("change");
            _workoutObjects = data;
            errorHandler.hideLoader();
            AddCustomWorkout.renderWorkouts();
        }).fail(function() {
            errorHandler.showError();
        }).always(function() {
            errorHandler.hideLoader();
        });
    };
    AddCustomWorkout.getWorkoutObject = function() {
        var ENDPOINT = APIEndpoint26 + "/me/workouts/" + _workoutID + "/detail";
        errorHandler.showLoader();
        $.ajax({
            type: "GET",
            url: ENDPOINT,
            contentType: "application/json",
            dataType: "json",
            xhrFields: {
                withCredentials: true
            }
        }).done(function(data) {
            console.log("[RECEIVED WORKOUT]", data);
            errorHandler.hideLoader();
            var workout = data.workout;
            _collectedData.workoutName = workout.name;
            _collectedData.eventType = workout.eventType;
            _collectedData.startDate = workout.startLocal;
            _collectedData.endDate = workout.endLocal;
            _collectedData.workoutCategory = workout.workoutCategoryId;
            _collectedData.workoutSubCategoryId = workout.workoutSubCategoryId;
            _collectedData.calories = workout.totalCalories;
            _collectedData.distance = workout.totalDistance;
            _collectedData.distanceUnit = workout.distanceUnit;
            _collectedData.notes = workout.notes;
            _collectedData.timezone = workout.localTimeZone;
            _collectedData.trainerName = workout.trainerName;
            AddCustomWorkout.populateWorkoutFields();
        }).fail(function(d) {
            console.log("server error", d.responseJSON);
            errorHandler.showError();
        }).always(function() {
            errorHandler.hideLoader();
        });
    };
    AddCustomWorkout.cancel = function(e) {
        e.preventDefault();
        window.location.href = "/activity#WORKOUTS";
    };
})(window.App);

(function(App) {
    "use strict";
    var ClassDetail = App.Pages.ClassDetail = {};
    var Item = Backbone.Model.extend({
        defaults: {
            id: "",
            type: "",
            selected: false,
            displayName: ""
        }
    });
    var ItemCollection = Backbone.Collection.extend();
    var FavoritesContainerView = Backbone.View.extend({
        el: ".favorites-class-container",
        initialize: function(options) {
            this.options = options || {};
        },
        render: function() {
            var itemCollection = new ItemCollection(), favoritesButtonView = new FavoritesButtonView(), favoritesListView = new FavoritesListView({
                collection: itemCollection,
                favoritesData: this.options.favoritesData,
                updateCallback: favoritesButtonView.updateCount.bind(favoritesButtonView)
            });
            favoritesButtonView.render();
            favoritesListView.render();
        }
    });
    var FavoritesButtonView = Backbone.View.extend({
        el: ".favorites-button",
        updateCount: function(number) {
            var content = "";
            if (number !== 0) {
                content = "(" + number + ")";
            }
            this.$el.find(".favorite-count").text(content);
        },
        render: function() {
            var that = this;
            this.$el.on("click", function() {
                that.$el.toggleClass("active");
            });
        }
    });
    var FavoritesListView = Backbone.View.extend({
        el: ".favorites-list",
        initialize: function(options) {
            this.options = options || {};
        },
        updateCount: function() {
            var count = 0;
            this.collection.each(function(item) {
                if (item.get("selected")) {
                    count++;
                }
            });
            this.options.updateCallback(count);
        },
        render: function() {
            var that = this;
            this.$el.find("li").each(function(index, element) {
                var type = $(element).attr("data-type"), id = parseInt($(element).attr("data-id"), 10), data = that.options.favoritesData, item, selected = false, favoritesListSingleView;
                if (_.findIndex(data[type], {
                    id: id
                }) !== -1) {
                    selected = true;
                }
                item = new Item({
                    displayName: $(element).find("strong").text(),
                    type: type,
                    id: id,
                    selected: selected
                });
                that.collection.add(item);
                favoritesListSingleView = new FavoritesListSingleView({
                    el: element,
                    model: item,
                    updateCallback: that.updateCount.bind(that)
                });
                favoritesListSingleView.render();
            });
        }
    });
    var FavoritesListSingleView = Backbone.View.extend({
        model: Item,
        initialize: function(options) {
            this.options = options || {};
        },
        toggleSelected: function() {
            this.model.set("selected", !this.model.get("selected"));
            this.options.updateCallback();
            this.$el.find("span").toggleClass("icon-star icon-star-empty");
        },
        updateFavorite: function() {
            var status = this.model.get("selected"), ENDPOINT_URL = APIEndpoint + "/me/favorites/" + this.model.get("type"), that = this;
            if (!status) {
                this.model.urlRoot = ENDPOINT_URL;
                this.model.save({}, {
                    contentType: "application/json",
                    xhrFields: {
                        withCredentials: true
                    },
                    success: function(model, response) {
                        debug("SAVE MODEL", response);
                        that.toggleSelected();
                    }
                });
            } else {
                ENDPOINT_URL = ENDPOINT_URL + "/remove/" + this.model.get("id");
                $.ajax({
                    type: "DELETE",
                    url: ENDPOINT_URL,
                    xhrFields: {
                        withCredentials: true
                    },
                    contentType: "application/json"
                }).success(function(response) {
                    debug("DESTROY MODEL", response);
                    that.toggleSelected();
                });
            }
            EQ.Helpers.user.invalidateFavoritesCache();
        },
        render: function() {
            var that = this;
            if (this.model.get("selected")) {
                this.$el.find("span").removeClass("icon-star-empty").addClass("icon-star");
                this.options.updateCallback();
            }
            this.$el.on("click", function() {
                that.updateFavorite();
            });
        }
    });
    var DataBikes = {};
    var DataClass = {};
    var BikeClassDetail = {};
    var RegularClassDetail = {};
    DataBikes.init = function(ENDPOINT, bikeInstanceID) {
        $.ajax({
            type: "GET",
            url: ENDPOINT,
            contentType: "application/json",
            xhrFields: {
                withCredentials: true
            },
            dataType: "json",
            success: function(data) {
                debug("bikesdata", data);
                if (data.reservation.result !== null) {
                    if (data.layout.cycleClassStatus.isClassWithinCancelPeriod === false) {
                        $(".remove-class").addClass("active");
                        $(".remove-class").on("click", DataClass.removeClass);
                    } else {
                        $(".see-bike, .cancel-class").addClass("active");
                        $(".cancel-class").on("click", function() {
                            DataBikes.cancelBike(bikeInstanceID, $(this));
                        });
                        DataBikes.checkOptStatus(bikeInstanceID, data);
                    }
                } else {
                    $(".see-bike, .cancel-class").removeClass("active");
                    $(".book-bike, .remove-class").addClass("active");
                }
                if (DataClass.jsonData.status.isWithinBookingWindow === false) {
                    $(".see-bike, .book-bike").removeClass("active");
                }
            },
            error: function(d) {
                debug("server error", d.responseJSON);
            }
        });
    };
    DataBikes.checkOptStatus = function(bikeInstanceID, data) {
        if (data.classInstanceDetail.workoutSubCategoryId === 2 || data.classInstanceDetail.workoutSubCategoryId === 3) {
            var isCyclingLeaderOptOut = true, $optInCheckBox = $('.class-detail li .checkbox input[type="checkbox"]'), $checkBoxComponent = $optInCheckBox.parents(".checkbox.inline");
            if (data.reservation.result && data.reservation.result.isCyclingLeaderOptOut === false) {
                isCyclingLeaderOptOut = false;
            }
            $(".class-detail li.opt-status").show();
            $optInCheckBox.attr("checked", !isCyclingLeaderOptOut);
            if (!isCyclingLeaderOptOut) {
                $checkBoxComponent.addClass("checked");
            } else {
                $checkBoxComponent.removeClass("checked");
            }
            DataBikes.OptInCheckboxloader = EQ.Helpers.loaderAndErrorHandler($(".opt-status"), {
                type: "popup",
                color: "white",
                errorTitle: "Error"
            });
            $optInCheckBox.on("change", function() {
                DataBikes.OptInCheckboxloader.showLoader();
                var isChecked = $(this).is(":checked");
                if ($(this).is(":checked") && !DataBikes.gender) {
                    EQ.Helpers.getService("/v1/me").done(function(preferencesData) {
                        var gender = preferencesData.profile.gender;
                        debug("CURRENT GENDER+++++++++", gender);
                        if (gender !== "Male" && gender !== "Female") {
                            DataBikes.OptInCheckboxloader.hideLoader();
                            if (!DataBikes.genderModalInitialized) {
                                App.loadComponent("gender-selection", $(".classdetail"), {
                                    genderSelectedCallback: function(gender) {
                                        DataBikes.gender = gender;
                                        $checkBoxComponent.addClass("checked");
                                        $optInCheckBox.attr("checked", true);
                                        DataBikes.OptInCheckboxloader.showLoader();
                                        DataBikes.getOptStatus(bikeInstanceID, false);
                                    },
                                    genderDeclinedCallback: function() {
                                        $checkBoxComponent.removeClass("checked");
                                        $optInCheckBox.attr("checked", false);
                                        DataBikes.OptInCheckboxloader.showLoader();
                                        DataBikes.getOptStatus(bikeInstanceID, true);
                                    }
                                });
                                DataBikes.genderModalInitialized = true;
                            } else {
                                Backbone.Events.trigger("gender-selection:open");
                            }
                        } else {
                            DataBikes.OptInCheckboxloader.showLoader();
                            $(".opt-status").find(".loader, .error-box").remove();
                            DataBikes.getOptStatus(bikeInstanceID, !isChecked);
                        }
                    });
                } else {
                    DataBikes.OptInCheckboxloader.showLoader();
                    $(".opt-status").find(".loader, .error-box").remove();
                    DataBikes.getOptStatus(bikeInstanceID, !isChecked);
                }
            });
        }
    };
    DataBikes.getOptStatus = function(bikeInstanceID, optOutStatus) {
        console.log("OPT STATUS", optOutStatus);
        var ENDPOINT = APIEndpoint + "/classes/bikes/" + bikeInstanceID + "/leaderoptout/" + optOutStatus;
        $.ajax({
            type: "PUT",
            url: ENDPOINT,
            contentType: "application/json",
            xhrFields: {
                withCredentials: true
            },
            dataType: "json",
            success: function(data) {
                debug("OPT STATUS OK", data);
                DataBikes.OptInCheckboxloader.hideLoader();
            },
            error: function(d) {
                debug("server error", d.responseJSON);
                DataBikes.OptInCheckboxloader.showError();
            }
        });
    };
    DataBikes.cancelBike = function(bikeInstanceID, $el) {
        console.log("CANCEL BIKE");
        var ENDPOINT = APIEndpoint + "/classes/bikes/" + bikeInstanceID + "/cancel", loaderAndError;
        loaderAndError = EQ.Helpers.loaderAndErrorHandler($el, {
            type: "button",
            color: "black",
            errorTitle: "Error"
        });
        loaderAndError.showLoader();
        $.ajax({
            type: "DELETE",
            url: ENDPOINT,
            contentType: "application/json",
            xhrFields: {
                withCredentials: true
            },
            dataType: "json",
            success: function(data) {
                debug("CANCEL BIKE OK", data);
                loaderAndError.hideLoader();
                $(".remove-class").trigger("click");
                $(".see-bike, .cancel-class").removeClass("active");
                $(".opt-status").hide();
                $(".remove-class, .book-bike").addClass("active");
            },
            error: function(d) {
                debug("server error", d.responseJSON);
                loaderAndError.showError();
            }
        });
    };
    DataClass.init = function(CLASSENDPOINT) {
        $.ajax({
            type: "GET",
            url: CLASSENDPOINT,
            cache: false,
            contentType: "application/json",
            xhrFields: {
                withCredentials: true
            },
            dataType: "json",
            success: function(data) {
                debug("classdata", data);
                window.tagData = window.tagData || {};
                var timeOffset = window.moment(data.startLocal).diff(data.facilityCurrentDateTime, "hours"), timeOffsetMinutes = window.moment(data.startLocal).diff(data.facilityCurrentDateTime, "minutes");
                if (timeOffset || timeOffsetMinutes) {
                    if (timeOffset > 0) {
                        timeOffset = Math.floor(timeOffset);
                    } else {
                        timeOffset = Math.ceil(timeOffset);
                    }
                    if (timeOffset === 0) {
                        if (timeOffsetMinutes > 0) {
                            timeOffset = 1;
                        } else {
                            timeOffset = -1;
                        }
                    }
                }
                window.tagData.classInstance = {
                    classId: data.classId.toString(),
                    facilityId: data.facilityId,
                    classInstanceId: data.classInstanceId.toString(),
                    categoryId: data.workoutCategoryId.toString(),
                    timeOffset: timeOffset.toString()
                };
                DataClass.jsonData = data;
                if (data.isOnCalendar === false) {
                    $(".add-class").addClass("active");
                } else {
                    $(".export-to-calendar").addClass("active");
                    $(".export-to-calendar").on("click", function() {
                        window.tagData.exportToCal = window.tagData.exportToCal || {};
                        window.tagData.exportToCal = {
                            action: "export-complete",
                            type: "class"
                        };
                        window.track("exportToCal", window.tagData.exportToCal);
                    });
                    if (data.isCyclingClass === true) {
                        var ENDPOINT = APIEndpoint + "/classes/bikes/" + BikeClassDetail.classInstance;
                        DataBikes.init(ENDPOINT, BikeClassDetail.classInstance);
                    } else {
                        $(".remove-class").addClass("active");
                    }
                }
                $(".add-class").on("click", DataClass.addClass);
                $(".remove-class").on("click", DataClass.removeClass);
            },
            error: function(d) {
                debug("server error", d.responseJSON);
            }
        });
    };
    DataClass.addClass = function(e) {
        e.preventDefault();
        var ENDPOINT = APIEndpoint26 + "/me/calendar/" + BikeClassDetail.classInstance + "?isRecurring=false", loaderAndError, addToCalendar;
        loaderAndError = EQ.Helpers.loaderAndErrorHandler($(this), {
            type: "button",
            color: "white",
            errorTitle: "Error"
        });
        var $genderFeedback = $(".gender-feedback");
        var validGender = new RegExp("male|female");
        var optStatus = $(".class-detail li.opt-status input").prop("checked");
        $genderFeedback.addClass("hidden");
        if (!optStatus || userProfileJson.Gender && validGender.test(userProfileJson.Gender.toLowerCase())) {
            loaderAndError.showLoader();
            addToCalendar = $.ajax({
                type: "POST",
                url: ENDPOINT,
                contentType: "application/json",
                xhrFields: {
                    withCredentials: true
                },
                dataType: "json"
            });
            addToCalendar.done(function(data) {
                loaderAndError.hideLoader();
                debug("[ADDCLASS OK]", data);
                if (DataClass.jsonData.isCyclingClass === true) {
                    $(".remove-class, .export-to-calendar").addClass("active");
                    $(".add-class").removeClass("active");
                    if (DataClass.jsonData.status.isWithinBookingWindow === false) {
                        $(".see-bike, .book-bike").removeClass("active");
                        $(".overlay-box:not(.bike-overlay).add").addClass("active");
                        setTimeout(function() {
                            $(".overlay-box:not(.bike-overlay).add").removeClass("active");
                        }, 5e3);
                    } else {
                        $(".bike-overlay.add, .book-bike").addClass("active");
                        setTimeout(function() {
                            $(".bike-overlay.add").removeClass("active");
                        }, 5e3);
                    }
                } else {
                    $(".overlay-box.add, .export-to-calendar, .remove-class").addClass("active");
                    $(".add-class").removeClass("active").find("p").remove();
                    setTimeout(function() {
                        $(".overlay-box.add").removeClass("active");
                    }, 5e3);
                }
                if (moment(DataClass.jsonData.endLocal).isBefore(DataClass.jsonData.facilityCurrentDateTime)) {
                    window.location.href = "/activity/workouts/" + data.result.id;
                }
            }).fail(function(d) {
                debug("server error", d.responseJSON);
                loaderAndError.showError();
            });
        } else {
            debug("gender missing", userProfileJson.Gender);
            $genderFeedback.removeClass("hidden");
        }
    };
    DataClass.removeClass = function(e) {
        e.preventDefault();
        var ENDPOINT = APIEndpoint + "/me/calendar/cancel/" + DataClass.jsonData.userEventId + "?removeRecurring=false", loaderAndError;
        loaderAndError = EQ.Helpers.loaderAndErrorHandler($(this), {
            type: "button",
            color: "black",
            errorTitle: "Error"
        });
        loaderAndError.showLoader();
        $.ajax({
            type: "DELETE",
            url: ENDPOINT,
            contentType: "application/json",
            xhrFields: {
                withCredentials: true
            },
            dataType: "json",
            success: function(data) {
                debug("[REMOVECLASS OK]", data);
                var currentDateTime = DataClass.jsonData.facilityCurrentDateTime;
                var timeOffset = moment(DataClass.jsonData.startDate).diff(currentDateTime, "hours"), timeOffsetMinutes = moment(DataClass.jsonData.startDate).diff(currentDateTime, "minutes");
                if (timeOffset || timeOffsetMinutes) {
                    if (timeOffset > 0) {
                        timeOffset = Math.floor(timeOffset);
                    } else {
                        timeOffset = Math.ceil(timeOffset);
                    }
                    if (timeOffset === 0) {
                        if (timeOffsetMinutes > 0) {
                            timeOffset = 1;
                        } else {
                            timeOffset = -1;
                        }
                    }
                }
                window.tagData.classInstance = window.tagData.classInstance || {};
                window.tagData.classInstance = {
                    classId: DataClass.jsonData ? DataClass.jsonData.classId !== "" && DataClass.jsonData.classId !== null ? DataClass.jsonData.classId.toString() : "" : "",
                    facilityId: DataClass.jsonData ? DataClass.jsonData.facility.facilityId !== "" && DataClass.jsonData.facility.facilityId !== null ? DataClass.jsonData.facility.facilityId.toString() : "" : "",
                    classInstanceId: DataClass.jsonData ? DataClass.jsonData.classInstanceId !== "" && DataClass.jsonData.classInstanceId !== null ? DataClass.jsonData.classInstanceId.toString() : "" : "",
                    categoryId: DataClass.jsonData ? DataClass.jsonData.workoutCategoryId !== "" && DataClass.jsonData.workoutCategoryId !== null ? DataClass.jsonData.workoutCategoryId.toString() : "" : "",
                    timeOffset: timeOffset ? timeOffset.toString() : ""
                };
                window.track("classCalendarDelete", window.tagData.classInstance);
                loaderAndError.hideLoader();
                $(".overlay-box.remove, .add-class").addClass("active");
                $(".remove-class, .see-bike, .book-bike, .export-to-calendar").removeClass("active");
                if (DataClass.jsonData.isCyclingClass === true && DataClass.jsonData.isFinished === false || DataClass.jsonData.isHappeningNow === false) {
                    $(".book-bike").addClass("active");
                }
                setTimeout(function() {
                    $(".overlay-box.remove").removeClass("active");
                }, 5e3);
            },
            error: function(d) {
                debug("server error", d.responseJSON);
                loaderAndError.showError();
            }
        });
    };
    ClassDetail.renderButtons = function() {
        BikeClassDetail.classInstance = $("nav.buttons").data("id");
        RegularClassDetail.classInstance = BikeClassDetail.classInstance;
        var CLASSENDPOINT = APIEndpoint26 + "/classes/" + RegularClassDetail.classInstance;
        DataClass.init(CLASSENDPOINT);
    };
    ClassDetail.updateOmniture = function() {
        if ($(document).find($("#classDetailsInfo"))) {
            window.tagData = window.tagData || {};
            var classDetails = JSON.parse($("#classDetailsInfo").attr("data-component-options")), timeOffset = window.moment(classDetails.startLocal).diff(classDetails.facilityCurrenttime, "hours"), timeOffsetMinutes = window.moment(classDetails.startLocal).diff(classDetails.facilityCurrenttime, "minutes");
            if (timeOffset) {
                if (timeOffset > 0) {
                    timeOffset = Math.floor(timeOffset);
                } else {
                    timeOffset = Math.ceil(timeOffset);
                }
                if (timeOffset === 0) {
                    if (timeOffsetMinutes > 0) {
                        timeOffset = 1;
                    } else {
                        timeOffset = -1;
                    }
                }
            }
            window.tagData.classInstance = {
                classId: classDetails.classID,
                facilityId: classDetails.facilityID,
                classInstanceId: classDetails.classInstanceID,
                categoryId: classDetails.categoryID,
                timeOffset: timeOffset.toString()
            };
        }
    };
    ClassDetail.init = function(id) {
        console.log(id);
        EQ.Helpers.user.getFavorites(function(favoritesData) {
            var favoritesContainerView = new FavoritesContainerView({
                favoritesData: favoritesData
            });
            favoritesContainerView.render();
        });
        if (user) {
            ClassDetail.renderButtons();
        }
        ClassDetail.updateOmniture();
    };
})(window.App);

(function(global, App) {
    "use strict";
    var Club = App.Pages.Club = {};
    debug("[CLUB DETAIL] page");
    Club.icon = function(facility) {
        return '<div class="custom-marker active"><span class="icon-marker-o"></span><h5>' + facility.ClubName + "</h5></div>";
    };
    Club.onMapsLoaded = function() {
        Club.Map = new EQ.Maps.Map(Club.ui.$mapContainer[0]);
        var region = EQ.Helpers.getRegionByTitle(Club.region);
        if (region) {
            Club.Region.select(region);
        }
        var club = EQ.Helpers.getFacilityById(Club.clubId);
        var marker = Club.Map.markers.find(club.Latitude, club.Longitude);
        Club.Map.fit([ club ], -3);
        if (marker) {
            debug("[ClubDetail] Setting marker open:", marker);
            marker.setAnchor(RichMarkerPosition.TOP);
            marker.setContent(Club.icon(club));
        }
    };
    Club.Club = {
        parse: function(facility) {
            EQ.Helpers.setPositionGetter(facility);
            Club.Map.markers.add({
                lat: facility.Latitude,
                lng: facility.Longitude,
                content: Club.Icon.Marker.regular(),
                click: function() {
                    EQ.Maps.trigger("CLUB_MARKER_CLICK", {
                        facility: facility,
                        marker: this
                    });
                }
            }, true);
            return this;
        },
        showAll: function() {
            if (!this._facilities) {
                var facilities = [];
                $.each(Club.Data, function(i, region) {
                    facilities = facilities.concat(EQ.Helpers.getAllFacilities(region));
                });
                this._facilities = facilities;
            }
            $.each(this._facilities, function(i, club) {
                Club.Club.parse(club);
            });
        }
    };
    Club.Icon = {
        Marker: {
            regular: function() {
                return '<div class="custom-marker"><span class="icon-marker-dot"></span></div>';
            }
        }
    };
    Club.Region = {
        select: function(region) {
            if (!region.bounds) {
                region.bounds = EQ.Maps.Bounds(Club.getChildrenPoints(region));
            }
            this.showClubs(region);
        },
        showClubs: function(region) {
            Club.Map.fitBounds(region.bounds);
            Club.Club.showAll();
        }
    };
    Club.getChildrenPoints = function(region) {
        var that = this, points = [];
        if (region.SubRegions && region.SubRegions.length) {
            $.each(region.SubRegions, function(i, subregion) {
                points = points.concat(that.getChildrenPoints(subregion));
            });
        } else if (region.Facilities.length) {
            points = $.map(region.Facilities, function(club) {
                if (club.Latitude && club.Longitude) {
                    return EQ.Maps.Point({
                        lat: club.Latitude,
                        lng: club.Longitude
                    });
                } else {
                    console.error("A club doesn't have Lat Lng properties.", club);
                }
            });
        }
        return points;
    };
    Club.toggleMapContainer = function(e) {
        e.preventDefault();
        $(e.currentTarget).closest(".club-finder-map").children("div").toggle();
        if (!this.mapLoaded) {
            EQ.Maps.Load(this.onMapsLoaded);
            this.mapLoaded = true;
        }
    };
    Club.events = function() {
        this.ui.$toggleMapContainer.on("click", _.bind(this.toggleMapContainer, this));
    };
    Club.ui = {
        $mapContainer: $(".map-container"),
        $toggleMapContainer: $(".toggleMapContainer")
    };
    Club.init = function(region, subregion, club) {
        debug("[ClubDetail] init:", region, subregion, club);
        Club.region = region;
        Club.Data = global.allRegionsData;
        Club.mapLoaded = false;
        Club.clubId = currentClub;
        Club.events();
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var Clubs = App.Pages.Clubs = {};
    debug("[CLUBS] page");
    Clubs.Club = {
        parse: function(facility) {
            EQ.Helpers.setPositionGetter(facility);
            Clubs.Map.markers.add({
                lat: facility.Latitude,
                lng: facility.Longitude,
                content: Clubs.Icon.Marker.regular(),
                click: function() {
                    EQ.Maps.trigger("CLUB_MARKER_CLICK", {
                        facility: facility,
                        marker: this
                    });
                }
            }, true);
            return this;
        },
        showAll: function() {
            if (!this._facilities) {
                var facilities = [];
                $.each(Clubs.Data, function(i, region) {
                    facilities = facilities.concat(EQ.Helpers.getAllFacilities(region));
                });
                this._facilities = facilities;
            }
            $.each(this._facilities, function(i, club) {
                Clubs.Club.parse(club);
            });
        },
        getLink: function(facility) {
            return facility.URL || "/clubs/" + facility.ShortName;
        }
    };
    Clubs.Icon = {
        Marker: {
            regular: function() {
                return '<div class="custom-marker"><span class="icon-marker-dot"></span></div>';
            }
        }
    };
    Clubs.onMapsLoaded = function() {
        Clubs.Map = new EQ.Maps.Map(Clubs.ui.$mapContainer[0]);
        var region = EQ.Helpers.getRegionByTitle($(".clubs-region").data("region"));
        if (region) {
            Clubs.Region.select(region);
        }
    };
    Clubs.Region = {
        select: function(region) {
            if (!region.bounds) {
                region.bounds = EQ.Maps.Bounds(Clubs.getChildrenPoints(region));
            }
            this.showClubs(region);
        },
        showClubs: function(region) {
            Clubs.Map.fitBounds(region.bounds);
            Clubs.Club.showAll();
        }
    };
    Clubs.getChildrenPoints = function(region) {
        var that = this, points = [];
        if (region.SubRegions && region.SubRegions.length) {
            $.each(region.SubRegions, function(i, subregion) {
                points = points.concat(that.getChildrenPoints(subregion));
            });
        } else if (region.Facilities.length) {
            points = $.map(region.Facilities, function(club) {
                if (club.Latitude && club.Longitude) {
                    return EQ.Maps.Point({
                        lat: club.Latitude,
                        lng: club.Longitude
                    });
                } else {
                    console.error("A club doesn't have Lat Lng properties.", club);
                }
            });
        }
        return points;
    };
    Clubs.toggleMapContainer = function(e) {
        e.preventDefault();
        $(e.currentTarget).closest(".club-finder-map").children("div").toggle();
        if (!this.mapLoaded) {
            EQ.Maps.Load(this.onMapsLoaded);
            this.mapLoaded = true;
        }
    };
    Clubs.events = function() {
        this.ui.$toggleMapContainer.on("click", _.bind(this.toggleMapContainer, this));
    };
    Clubs.ui = {
        $mapContainer: $(".map-container"),
        $toggleMapContainer: $(".toggleMapContainer")
    };
    Clubs.init = function() {
        Clubs.Data = global.allRegionsData;
        Clubs.mapLoaded = false;
        Clubs.events();
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var ConnnectAccounts = App.Pages.ConnnectAccounts = {}, $loginForm = $("form.login");
    ConnnectAccounts.validateAndSubmit = function() {
        if ($loginForm.data("publicMethods").isValid()) {
            App.Pages.ConnnectAccounts.getToken(function(token) {
                $loginForm.data("publicMethods").sendAjaxRequest({
                    username: "email",
                    password: "password",
                    persistLogin: true
                }, function(data, textStatus, jqXHR) {
                    if (jqXHR.status === 202) {
                        if (data.code === "LegacyUser") {
                            ConnnectAccounts.ChangeLegacyUserName(data);
                            return;
                        }
                        if (data.code === "SpaOnlyUser") {
                            $(".is-error").removeClass("hidden").html(data.reasonPhrase.replace("{signin}", '<a href="/login">sign in</a>'));
                            return;
                        }
                    }
                    var facebookToken = {
                        facebookAccessToken: token
                    };
                    $.ajax(APIEndpoint + "/registration/linkwithfacebook", {
                        data: JSON.stringify(facebookToken),
                        contentType: "application/json",
                        type: "POST",
                        xhrFields: {
                            withCredentials: true
                        }
                    }).done(function() {
                        if (typeof window.track === "function") {
                            window.track("regConnectedWithFB");
                        }
                        debug("[Connect] Ready");
                        EQ.Helpers.refreshUserCacheData(function() {
                            var returnUrl = window.returnUrl || "/";
                            global.location.href = returnUrl;
                        });
                    }).fail(function(jqXHR) {
                        var errorText = jqXHR.responseJSON && jqXHR.responseJSON.message;
                        debug("[FBLogin] Failed", errorText);
                        if (errorText) {
                            $(".is-error").removeClass("hidden").text(errorText);
                        }
                    });
                });
            });
        }
    };
    ConnnectAccounts.getToken = function(cb) {
        FB.login(function(response) {
            if (response.status === "connected") {
                cb(response.authResponse.accessToken);
            }
        }, {
            scope: "email,user_likes,user_friends"
        });
    };
    ConnnectAccounts.init = function() {
        debug("[Connect] Init");
        $loginForm.on("submit", function(e) {
            e.preventDefault();
            ConnnectAccounts.validateAndSubmit();
        });
        $loginForm.on("click", "#changeUsername", function(e) {
            e.preventDefault();
            ConnnectAccounts.ChangeLegacyUserName($(this).data());
        });
    };
    ConnnectAccounts.ChangeLegacyUserName = function(data) {
        var $form = $("<form />");
        $form.attr("action", "/help/change/username").attr("method", "POST");
        var $email = $('<input type="hidden"/>').attr("name", "email").val(data.email);
        var $userName = $('<input type="hidden"/>').attr("name", "userName").val(data.userName);
        $form.append($email);
        $form.append($userName);
        $("body").append($form);
        $form.submit();
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var CreateAccount = App.Pages.CreateAccount = {}, $createAccountForm = $(".create-account");
    CreateAccount.init = function() {
        debug("[CreateAccount] Init");
        CreateAccount.bind();
    };
    CreateAccount.bind = function() {
        var that = CreateAccount;
        $createAccountForm.on("submit", function(e) {
            e.preventDefault();
            that.validateAndSubmit();
        });
    };
    CreateAccount.validateAndSubmit = function() {
        if ($createAccountForm.data("publicMethods").isValid()) {
            $createAccountForm.data("publicMethods").sendAjaxRequest({
                email: "Create.Email",
                password: "Create.Password",
                sourceSystem: "Create.Country",
                lastName: "Create.LastName",
                firstName: "Create.FirstName",
                barcodeId: "Create.BarcodeId"
            }, function() {
                console.log($createAccountForm.find('input[name="Create.Email"]').val());
                var userModel = {
                    email: $createAccountForm.find('input[name="Create.Email"]').val()
                };
                debug("[CreateAccount] Callback");
                $(".user-recover-confirmation").removeClass("hidden");
                var $confirmationModule = $(".confirmation-message-module");
                $confirmationModule.data("templateData", userModel);
                $confirmationModule.data("publicMethods").render();
                window.track("regSignupVerifEmlSent");
                $createAccountForm.add(".tpl-subtitleparagraphcallout.dtm-user-subtitleparagraphcallout").add(".create-acount-mail-sent").addClass("hidden");
                $("body, html").animate({
                    scrollTop: 0
                });
            });
        }
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var CustomWorkout = App.Pages.CustomWorkout = {};
    CustomWorkout.init = function() {
        console.log("---------Calling from custom workout page");
        var customworkouturl = APIEndpoint + "/classes/Customworkouts";
        var CustomWorkoutModel = Backbone.Model.extend({});
        var CustomWorkoutCollection = Backbone.PageableCollection.extend({
            model: CustomWorkoutModel,
            url: customworkouturl,
            mode: "client",
            state: {
                pageSize: 15
            }
        });
        var columns = [ {
            name: "workoutDate",
            label: "DATE",
            editable: false,
            cell: "string"
        }, {
            name: "workoutTime",
            label: "TIME",
            editable: false,
            cell: "string"
        }, {
            name: "name",
            label: "WORKOUT",
            editable: false,
            cell: "string"
        }, {
            name: "calories",
            label: "CALORIES",
            editable: false,
            cell: "string"
        }, {
            name: "description",
            label: "NOTES",
            editable: false,
            cell: "string"
        } ];
        var customWorkoutCollection = new CustomWorkoutCollection();
        customWorkoutCollection.fetch({
            xhrFields: {
                withCredentials: true
            },
            success: function() {
                var grid = new Backgrid.Grid({
                    columns: columns,
                    collection: customWorkoutCollection
                });
                $("#customWorkoutData").append(grid.render().el);
                var paginator = new Backgrid.Extension.Paginator({
                    collection: customWorkoutCollection
                });
                $("#customWorkoutData").append(paginator.render().el);
            },
            error: function() {
                $("#customWorkoutData").html("Failed to load data");
            }
        });
    };
})(window, window.App);

(function(App) {
    "use strict";
    App.Components["cycling-milestones"] = function($el) {
        console.log("MILESTONE INIT", $el);
    };
})(window.App);

(function(global, App) {
    "use strict";
    var CyclingPatch = App.Pages.CyclingPatch = {};
    CyclingPatch.init = function() {
        var maxItems = 3, $hero = $(".cycling-hero ul.section-carousel"), $feat = $(".feat ul.section-carousel"), $team = $(".team ul.section-carousel");
        maxItems = $hero.find("li").length;
        App.loadComponent("owl-slider", $hero, utils.getSliderOptions(maxItems));
        maxItems = $feat.find("li").length;
        App.loadComponent("owl-slider", $feat, utils.getSliderOptions(maxItems));
        maxItems = $team.find("li").length;
        App.loadComponent("owl-slider", $team, utils.getSliderOptions(maxItems));
        var bioOverlay = $(".bio-overlay-template").html();
        $(".view-full-bio").on("click", function() {
            if ($(window).width() < 768) {
                var text = $(this).text() === "View full bio" ? "Hide full bio" : "View full bio";
                $(this).siblings(".more-info").toggleClass("hidden");
                $(this).text(text);
                $(".meet-our-experts").data("owlCarousel").updateVars();
            } else {
                var bioContent = $(this).closest(".item-info").html(), fullBioText = $(this).siblings(".more-info");
                $(".page").append(bioOverlay);
                $(".bio-overlay-container .profile-pic-info").append(bioContent);
                $(".bio-overlay-container .profile-pic-info .more-info").addClass("hidden");
                $(".bio-overlay-container .view-full-bio").addClass("hidden");
                fullBioText.clone().appendTo($(".bio-overlay-container .profile-info"));
                $(".profile-info .more-info").removeClass("hidden");
            }
        });
        $("body").on("click", ".close-more-info", function(e) {
            e.preventDefault();
            if ($(window).width() < 768) {
                $(this).parent().siblings(".view-full-bio").trigger("click");
            } else {
                $(this).closest(".bio-overlay").remove();
            }
        });
    };
    var utils = {
        getSliderOptions: function(maxItems) {
            var sliderOpts = {
                singleItem: false,
                items: maxItems,
                setAsSingle: true,
                itemsDesktop: [ 1200, maxItems ],
                itemsTablet: [ 1023, maxItems ],
                itemsMobile: [ 768, 1 ]
            };
            return sliderOpts;
        }
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    App.Pages.GroupFitness = {};
    var GroupFitness = App.Pages.GroupFitness;
    GroupFitness.init = function() {
        $(window).on("resize scroll", GroupFitness.expandQuilt);
        GroupFitness.expandQuilt();
        GroupFitness.omnitCall();
    };
    GroupFitness.expandImage = function(e) {
        e.preventDefault();
        $('.grid-active [class*="image-"]').remove();
        $(this).find(".quilt-overlay").clone().fadeIn().appendTo(".grid-active").addClass("active");
        $(".grid-active").fadeIn().addClass("active");
        $(".groupfitness").addClass("overlay");
        setTimeout(function() {
            $(".grid-active .quilt-overlay").addClass("overlay");
            $("body").css({
                overflow: "hidden"
            });
        }, 100);
        $(".grid-active .close").on("click", function(e) {
            e.preventDefault();
            $(".grid-active .quilt-overlay").removeClass("overlay");
            $("body").removeAttr("style");
            $(".groupfitness").removeClass("overlay");
            $(".grid-active").fadeOut().removeClass("active");
            setTimeout(function() {
                $(".grid-active .quilt-overlay.active").remove();
            }, 700);
        });
        $(".grid-active .quilt-overlay-info a").on("click", function() {
            var omnitSearchLink = this.href.split("?")[1].split("=");
            window.tagData.searchLink = window.tagData.searchLink || {};
            window.tagData.searchLink = {
                type: "category",
                value: omnitSearchLink[1]
            };
            window.track("clickClassSearchLink", window.tagData.searchLink);
        });
    };
    GroupFitness.expandQuilt = function() {
        var images = $('[class*="image-"]');
        images.off("click").on("click", function(event) {
            if ($(this).attr("data-go-to") === "cycling") {
                event.preventDefault();
                window.location = "/groupfitness/cycling";
            } else {
                GroupFitness.expandImage.call(this, event);
            }
        });
    };
    GroupFitness.omnitCall = function() {
        $(".search-menu li a").on("click", function() {
            var hrefVal = this.href.split("/")[this.href.split("/").length - 1];
            if (hrefVal === "search") {
                window.tagData.searchLink = window.tagData.searchLink || {};
                window.tagData.searchLink = {
                    type: "findaclass",
                    value: ""
                };
                window.track("clickClassSearchLink", window.tagData.searchLink);
            } else if (hrefVal === "bookabike") {
                window.tagData.searchLink = window.tagData.searchLink || {};
                window.tagData.searchLink = {
                    type: "bike",
                    value: ""
                };
                window.track("clickClassSearchLink", window.tagData.searchLink);
            }
        });
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var Home = App.Pages.Home = {}, $body = $("body"), $win = $(global);
    Home.fitElement = {
        currentTop: 0,
        currentPage: 0,
        hideTimeout: undefined,
        isSupported: function() {
            return false;
        },
        isTouch: function() {
            return "undefined" !== typeof document.documentElement.ontouchstart;
        },
        bind: function() {
            var that = this;
            $win.on("orientationchange", function() {
                if (Home.fitElement.isTouch() && Home.fitElement.isSupported()) {
                    that.touchSupport(that.isSupported());
                }
                that.$el.removeClass("animating");
                that.$children.removeClass("active");
                $(".more-button").removeClass("hidden scrolling");
                if (Home.fitElement.isSupported() === false) {
                    $body.removeClass("closed-nav");
                    $body.addClass("no-snap");
                } else {
                    $body.addClass("closed-nav");
                    $body.removeClass("no-snap");
                }
                if (Home.fitElement.isTouch() && Home.fitElement.isSupported()) {
                    that.currentPage = 0;
                    that.setScrollTop(0);
                }
                $(".elevator a").removeClass("selected");
                $(".elevator a").eq(0).addClass("selected");
                if ($(".page-wrapper").data("plugin_stellar")) {
                    $(".page-wrapper").data("plugin_stellar").refresh();
                }
                if (Home.fitElement.isTouch() && Home.fitElement.isSupported()) {
                    if ($(".page-wrapper").data("plugin_stellar") === undefined) {
                        $(".page-wrapper").stellar({
                            horizontalScrolling: false,
                            scrollProperty: "transform",
                            positionProperty: "transform",
                            hideDistantElements: false
                        });
                    }
                }
            });
            this.$el.on("webkitTransitionEnd transitionend", function(evt) {
                if (evt.target === that.$el[0]) {
                    that.$el.removeClass("animating");
                    $(".more-button").removeClass("scrolling");
                    Home.fitElement.hideTimeout = setTimeout(function() {
                        $(".elevator").addClass("hide");
                    }, 2e3);
                }
            });
            $("nav.main .full-wrapper").on("touchend", function(evt) {
                evt.stopPropagation();
            }).on("touchmove", function(evt) {
                evt.preventDefault();
            });
            var elevetorLength = this.$children.length - 1;
            for (var i = 0; i < elevetorLength; i++) {
                var $elevatorCircle = $('<a href="#" class="elevator-button" data-index="' + i + '"><span class="inner"></span></a>');
                $(".elevator").append($elevatorCircle);
            }
            $(".elevator a").eq(0).addClass("selected");
            $(".elevator-trigger").on("click", this.elevator);
            $(".elevator-button").on("click", this.elevator);
            $(".more-button-desktop").on("click", this.elevator);
            $(".more-button").on("click", function() {
                if (Home.fitElement.currentPage < Home.fitElement.$children.length - 2) {
                    Home.fitElement.currentPage++;
                    Home.fitElement.goTo();
                }
            });
        },
        init: function(selector, childrenSelector) {
            this.$el = $(selector);
            this.$children = this.$el.find(childrenSelector);
            this.$children = this.$children.filter(function(i, e) {
                return $(e).find(".no-snap").length === 0;
            });
            this.bind();
            if (this.isSupported()) {
                this.touchSupport(true);
            }
        },
        getScrollTop: function($el) {
            $el = $el || this.$el;
            var computedTransform = $el.css("transform");
            return computedTransform !== "none" ? parseInt(computedTransform.match(/(-?[0-9]+)/g)[5], 10) * -1 : 0;
        },
        setScrollTop: function(n) {
            this.maxScrollTop = this.$el.height() - this.$children.eq(0).height();
            if (n < 1) {
                if (n >= -this.maxScrollTop) {
                    this.$el.css("transform", "translate3d(0, " + n + "px, 0)");
                }
            } else {
                this.$el.css("transform", "translate3d(0, 0, 0)");
            }
        },
        goNext: function() {
            if (this.currentPage === this.$children.length - 1) {
                return false;
            }
            this.currentPage++;
            this.goTo();
            return true;
        },
        goPrev: function() {
            if (this.currentPage === 0) {
                return false;
            }
            this.currentPage--;
            this.goTo();
            return true;
        },
        goTo: function() {
            var $page = this.$children.eq(this.currentPage), $el = this.$el;
            if (this.currentPage) {
                $body.removeClass("closed-nav");
            } else {
                $body.addClass("closed-nav");
            }
            clearTimeout(this.hideTimeout);
            var $elevatorLinks = $(".elevator a"), $elevatorCurrent = $(".elevator a.selected"), $elevator = $(".elevator");
            $elevatorCurrent.removeClass("selected");
            $elevatorLinks.eq(this.currentPage).addClass("selected");
            $elevator.removeClass("hide");
            if ($page.find(".carousel").first().hasClass("black") === true || $page.find(".rich-content").first().hasClass("black") === true) {
                $elevator.addClass("black");
            } else {
                $elevator.removeClass("black");
            }
            $(".more-button").addClass("scrolling");
            $(".more-button").removeClass("hidden");
            $el.addClass("animating");
            this.$children.removeClass("active");
            $page.addClass("active");
            if ($page.data("template") !== "Footer") {
                this.setScrollTop(-$page.position().top);
            } else {
                $elevator.addClass("hide");
                this.setScrollTop(-($el.height() - this.$children.eq(0).height()));
            }
            if (this.currentPage >= 1) {
                $(".more-button").addClass("hidden");
            }
        },
        elevator: function(e) {
            e.preventDefault();
            if (Home.fitElement.isSupported() === true) {
                $(".elevator a").removeClass("selected");
                $(".elevator a").eq($(this).data("index")).addClass("selected");
                Home.fitElement.currentPage = +$(this).data("index");
                Home.fitElement.goTo();
            } else {
                var pos = $(".page-snap").eq($(this).data("index")).offset().top - $("nav.main").height();
                $("body").animate({
                    scrollTop: pos
                });
            }
        }
    };
    Home.fitElement.touchSupport = function(that) {
        var EVENT_START = "touchstart", EVENT_MOVE = "touchmove", EVENT_END = "touchend", element, elementY, startY, startX, isHorizontal = false, dx, dy;
        var onTouchStart = function(evt) {
            if ($(evt.target).closest(".no-snap").length === 0 || $(evt.target).hasClass("no-snap").length === 0) {
                var touch = evt.touches[0];
                if (startY || that.$el.is(".animating")) {
                    evt.preventDefault();
                } else {
                    startY = touch.pageY;
                    startX = touch.pageX;
                    elementY = that.getScrollTop();
                    element.addEventListener(EVENT_MOVE, onTouchMove, false);
                    element.addEventListener(EVENT_END, onTouchEnd, false);
                }
            }
        };
        var onTouchMove = function(evt) {
            if ($(evt.target).closest(".no-snap").length === 0 || $(evt.target).hasClass("no-snap").length === 0) {
                var touch = evt.touches[0];
                dy = touch.pageY - startY;
                dx = touch.pageX - startX;
                isHorizontal = Math.abs(dx) > Math.abs(dy);
                if (!isHorizontal) {
                    evt.preventDefault();
                    that.setScrollTop(dy - elementY);
                }
            }
        };
        var onTouchEnd = function(evt) {
            if ($(evt.target).closest(".no-snap").length === 0 || $(evt.target).hasClass("no-snap").length === 0) {
                if (!isHorizontal && Math.abs(dy) > 10) {
                    if (dy < 0) {
                        that.goNext();
                    } else if (dy > 0) {
                        that.goPrev();
                    }
                } else {
                    that.setScrollTop(-elementY);
                }
                dy = null;
                startY = null;
                isHorizontal = false;
                element.removeEventListener(EVENT_MOVE, onTouchMove, false);
                element.removeEventListener(EVENT_END, onTouchEnd, false);
            }
        };
        return function(isActive) {
            element = that.$el[0];
            if (isActive) {
                element.addEventListener(EVENT_START, onTouchStart, false);
                if (that.currentPage) {
                    that.goTo();
                } else {
                    $body.addClass("closed-nav");
                    $body.scrollTop(0);
                }
                $body.addClass("page-snap-enabled");
            } else {
                that.setScrollTop(0);
                that.currentPage = 0;
                $body.removeClass("page-snap-enabled closed-nav");
                return element.removeEventListener(EVENT_START, onTouchStart, false);
            }
        };
    }(Home.fitElement);
    Home.omnitCall = function() {
        $(".search-menu li a").on("click", function() {
            var hrefVal = this.href.split("/")[this.href.split("/").length - 1];
            if (hrefVal === "search") {
                window.tagData.searchLink = window.tagData.searchLink || {};
                window.tagData.searchLink = {
                    type: "findaclass",
                    value: ""
                };
                window.track("clickClassSearchLink", window.tagData.searchLink);
            } else if (hrefVal === "bookabike") {
                window.tagData.searchLink = window.tagData.searchLink || {};
                window.tagData.searchLink = {
                    type: "bike",
                    value: ""
                };
                window.track("clickClassSearchLink", window.tagData.searchLink);
            }
        });
    };
    Home.init = function() {
        if (Home.fitElement.isSupported() === false) {
            $(".home-splash").height($(window).height() - $("nav.main").height());
        }
        Home.omnitCall();
        Home.fitElement.init(".page-wrapper", ".page-snap");
        if (Home.fitElement.isTouch() && Home.fitElement.isSupported()) {
            $(".page-wrapper").stellar({
                horizontalScrolling: false,
                scrollProperty: "transform",
                positionProperty: "transform",
                hideDistantElements: false
            });
            var isHome = $(".page-snap").data("template") === "HomePageTopParallax";
            if (isHome) {
                $(".dtm-homepagetopparallax").addClass("active");
            }
        }
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var Join = App.Pages.Join = {};
    Join.SelectClub = {};
    Join.SelectMembership = {};
    Join.MembershipPurchase = {};
    Join.ThankYouPage = {};
    Join.SelectClub.FindByZip = function(cb, err) {
        var ENDPOINT = APIEndpoint + "/facilities", zipcode = $('input[name="SearchByZip.ZipCode"]').val();
        $.get(ENDPOINT, {
            zip: zipcode,
            numberFacilities: 5,
            radius: 1e3
        }, function(d) {
            if (cb && typeof cb === "function") {
                if (d.facilities.length === 0) {
                    EQ.Geo.getLatLng(function() {
                        EQ.Geo.getNearestClub(function(club) {
                            if (club === null || club === undefined) {
                                cb();
                                return false;
                            } else {
                                debug("[GetNearestClub] ", club);
                                $(".nearme").data("clubSelector").set(club);
                                cb();
                            }
                        });
                    }, err);
                } else {
                    var selectedClub = d.facilities[0];
                    $(".nearme").data("clubSelector").set(selectedClub);
                    cb();
                }
            }
        }).fail(function() {
            EQ.Geo.getLatLng(function() {
                EQ.Geo.getNearestClub(function(club) {
                    if (club === null || club === undefined) {
                        cb();
                        return false;
                    } else {
                        debug("[GetNearestClub] ", club);
                        $(".nearme").data("clubSelector").set(club);
                        cb();
                    }
                });
            }, err);
        });
    };
    Join.SelectClub.bind = function() {
        $(".search").on("submit", function(e) {
            e.preventDefault();
            if ($(this).data("publicMethods").isValid()) {
                $('input[type="submit"]').data("original-text", $('input[type="submit"]').val()).val("Loading...").attr("disabled", true);
                Join.SelectClub.FindByZip(function() {
                    $("form").addClass("is-hidden");
                    $(".nearme-wrapper").removeClass("is-hidden");
                    $(".tpl-ctacallout a").css("display", "block");
                    setTimeout(function() {
                        EQ.Maps.fixLayout();
                    }, 16);
                }, function() {
                    $('input[type="submit"]').val($('input[type="submit"]').data("original-text")).attr("disabled", false);
                    $("form").find(".is-error").removeClass("hidden").text("Please try again later or enable Geolocation.");
                });
                $('.nearme select[name="facilities"]').on("change", function() {
                    var urlName = $(".nearme").data("clubSelector").get().URL;
                    var sectors = urlName.split("/");
                    $(".tpl-ctacallout a").attr("href", "/join/" + sectors[sectors.length - 1]);
                });
            }
        });
    };
    Join.SelectClub.init = function() {
        Join.SelectClub.bind();
    };
    Join.SelectMembership.bind = function() {
        console.log("Step2 Init!");
        $("a.join-now").on("click", function(e) {
            e.preventDefault();
            $(this).next("form").submit();
        });
    };
    Join.SelectMembership.promotions = function() {
        var tallestPromotion = 0;
        $(".membership-price-info").each(function() {
            console.log($(this).height());
            if ($(this).height() >= tallestPromotion) {
                tallestPromotion = $(this).height();
            }
        });
        $(".membership-price-info").height(tallestPromotion);
    };
    Join.SelectMembership.init = function() {
        Join.SelectMembership.bind();
        Join.SelectMembership.promotions();
        $(window).on("resize", _.throttle(function() {
            Join.SelectMembership.promotions();
        }, 400));
    };
    Join.MembershipPurchase.Submit = function() {
        var ENDPOINT = APIEndpoint + "/registration/residential";
        $(".personal-information .submit").attr("disabled", true);
        $(".personal-information .submit").val("Purchasing...");
        var $personalInformation = $(".personal-info"), $billingInformation = $(".billing-info"), $country = $personalInformation.find('input[name="Plan.CountryName"]').val();
        var PersonalData = {
            firstName: $personalInformation.find('input[name="MemberInformation.FirstName"]').val(),
            lastName: $personalInformation.find('input[name="MemberInformation.LastName"]').val(),
            emailAddress: $personalInformation.find('input[name="MemberInformation.EmailAddress"]').val(),
            phoneNumber: $personalInformation.find('input[name="MemberInformation.PhoneNumber"]').val(),
            address: {
                street: $personalInformation.find('input[name="MemberInformation.Address1"]').val(),
                "street-additional": $personalInformation.find('input[name="MemberInformation.Address2"]').val(),
                city: $personalInformation.find('input[name="MemberInformation.City"]').val(),
                state: !($country === "UK" || $country === "CA") ? $personalInformation.find('select[name="MemberInformation.State"]').val() : "",
                province: "",
                zip: $personalInformation.find('input[name="MemberInformation.ZipCode"]').val(),
                country: $country,
                stateProvince: !($country === "US" || $country === "CA") ? $personalInformation.find('input[name="MemberInformation.State"]').val() : $personalInformation.find('select[name="MemberInformation.State"]').val()
            }
        }, BillingData = {
            firstName: $billingInformation.find('input[name="BillingInformation.FirstName"]').val(),
            lastName: $billingInformation.find('input[name="BillingInformation.LastName"]').val(),
            emailAddress: $billingInformation.find('input[name="BillingInformation.EmailAddress"]').val(),
            phoneNumber: $billingInformation.find('input[name="BillingInformation.PhoneNumber"]').val(),
            address: {
                street: $billingInformation.find('input[name="BillingInformation.Address1"]').val(),
                "street-additional": $billingInformation.find('input[name="BillingInformation.Address2"]').val(),
                city: $billingInformation.find('input[name="BillingInformation.City"]').val(),
                state: !($country === "UK" || $country === "CA") ? $billingInformation.find('select[name="BillingInformation.State"]').val() : "",
                province: "",
                zip: $billingInformation.find('input[name="BillingInformation.ZipCode"]').val(),
                country: $country,
                stateProvince: !($country === "US" || $country === "CA") ? $billingInformation.find('input[name="BillingInformation.State"]').val() : $billingInformation.find('select[name="BillingInformation.State"]').val()
            }
        }, PostData = {
            facilityId: $personalInformation.find('input[name="Plan.FacilityId"]').val(),
            membershipPlanId: $personalInformation.find('input[name="Plan.PlanId"]').val(),
            countryId: $personalInformation.find('input[name="sourceSystem"]').val(),
            member: PersonalData,
            billing: BillingData,
            creditCard: {
                cardNumber: $billingInformation.find('input[name="BillingInformation.CreditCardNumber"]').val(),
                expirationMonth: $billingInformation.find('select[name="BillingInformation.ExpirationMonth"]').val(),
                expirationYear: $billingInformation.find('select[name="BillingInformation.ExpirationYear"]').val(),
                cvc: $billingInformation.find('input[name="BillingInformation.CreditCardSecurityCode"]').val()
            }
        };
        if ($('input[name="usepersonal"]').is(":checked")) {
            PostData.billing = PostData.member;
        }
        var purchaseError = function(err) {
            var $submit = $('.tpl-submitcallout input[type="submit"]');
            $submit.attr("disabled", false);
            $submit.val($submit.data("oldCopy"));
            $(".is-error").removeClass("hidden").text(err);
            $("body, html").animate({
                scrollTop: $(".is-error").offset().top - 100
            });
        };
        $.ajax({
            type: "POST",
            url: ENDPOINT,
            contentType: "application/json",
            data: JSON.stringify(PostData),
            dataType: "json",
            success: function(data) {
                if (data.error) {
                    purchaseError(data.error.message);
                } else {
                    data = $.extend({
                        facilityId: PostData.facilityId,
                        emailAddress: $personalInformation.find('input[name="MemberInformation.EmailAddress"]').val(),
                        facilityRegion: $personalInformation.find('input[name="Plan.Region"]').val(),
                        membershipPlanId: PostData.membershipPlanId
                    }, data);
                    Join.MembershipPurchase.ThankYou(data);
                }
            },
            error: function(d) {
                purchaseError(d.responseJSON.error.message);
            }
        });
    };
    Join.MembershipPurchase.ThankYou = function(d) {
        if (!d.error) {
            var $personalInformation = $(".personal-info");
            var $form = $("<form />");
            $form.attr("action", "/join/thank-you").attr("method", "POST");
            var name = $personalInformation.find('input[name="MemberInformation.FirstName"]').val(), charge = $("div.total-due span.price strong").html();
            var $name = $('<input type="hidden"/>').attr("name", "Name").val(name.charAt(0).toUpperCase() + name.slice(1));
            var $charge = $('<input type="hidden"/>').attr("name", "Charge").val(charge);
            var $type = $('<input type="hidden"/>').attr("name", "Card.Type").val(d.cardType);
            var $number = $('<input type="hidden"/>').attr("name", "Card.Number").val(d.lastFour);
            var $barcode = $('<input type="hidden"/>').attr("name", "Barcode").val(d.barcodeKey);
            var $facilityId = $('<input type="hidden"/>').attr("name", "FacilityId").val(d.facilityId);
            var $emailAddress = $('<input type="hidden"/>').attr("name", "EmailAddress").val(d.emailAddress);
            var $facilityRegion = $('<input type="hidden"/>').attr("name", "FacilityRegion").val(d.facilityRegion);
            var $membershipPlanId = $('<input type="hidden"/>').attr("name", "MembershipPlanId").val(d.membershipPlanId);
            var $lastName = $('<input type="hidden"/>').attr("name", "lastName").val(d.lastName);
            var $country = $('<input type="hidden"/>').attr("name", "country").val(d.country);
            $form.append($name);
            $form.append($charge);
            $form.append($type);
            $form.append($number);
            $form.append($barcode);
            $form.append($facilityId);
            $form.append($emailAddress);
            $form.append($facilityRegion);
            $form.append($membershipPlanId);
            $form.append($lastName);
            $form.append($country);
            $("body").append($form);
            $form.submit();
        }
    };
    Join.MembershipPurchase.bind = function() {
        $('input[name="usepersonal"]').on("change", function() {
            var checked = $(this).is(":checked");
            console.log(checked);
            $(".billing-info .information").toggle(!checked);
            $(".billing-info .information input").attr("disabled", checked);
            $(".billing-info .information select").attr("disabled", checked);
        });
        $('input[name="usepersonal"]').trigger("change");
        $('.tpl-submitcallout input[type="submit"]').on("click", function() {
            var $submit = $('.tpl-submitcallout input[type="submit"]');
            if ($("form.personal-information").data("publicMethods").isValid()) {
                $submit.attr("disabled", true);
                $submit.data("oldCopy", $submit.val());
                $submit.val("Loading...");
                $("form.personal-information").submit();
            }
        });
        $("form.personal-information").on("submit", function(e) {
            e.preventDefault();
            Join.MembershipPurchase.Submit();
        });
    };
    Join.MembershipPurchase.init = function() {
        Join.MembershipPurchase.bind();
    };
    Join.ThankYouPage.ActivateAccount = function(user, loaderAndError) {
        debug("activate]", user);
        var ENDPOINT = APIEndpoint + "/registration/validateuser";
        $.ajax({
            type: "POST",
            url: ENDPOINT,
            contentType: "application/json",
            data: JSON.stringify(user),
            dataType: "json",
            success: function(data) {
                if (data.error) {
                    loaderAndError.hideLoader();
                    $(".tpl-ctacallout a").show();
                    $(".tpl-ctacallout .message").hide();
                } else {
                    var $form = $("<form />");
                    $form.attr("action", "/activate/signin").attr("method", "POST");
                    console.log(data);
                    var $lastname = $('<input type="hidden"/>').attr("name", "LastName").val(data.lastName);
                    var $firstname = $('<input type="hidden"/>').attr("name", "FirstName").val(data.firstName);
                    var $country = $('<input type="hidden"/>').attr("name", "Country").val(user.country);
                    var $barcode = $('<input type="hidden"/>').attr("name", "Barcode").val(data.barcodeId);
                    var $email = $('<input type="hidden"/>').attr("name", "Email").val(data.emailAddress);
                    $form.append($lastname);
                    $form.append($firstname);
                    $form.append($country);
                    $form.append($barcode);
                    $form.append($email);
                    $("body").append($form);
                    $form.submit();
                }
            },
            error: function() {
                loaderAndError.hideLoader();
                $(".tpl-ctacallout .message").hide();
                $(".tpl-ctacallout a").show();
            }
        });
    };
    Join.ThankYouPage.init = function() {
        var user = {
            barcode: transactionDetail.Barcode,
            country: transactionDetail.Country,
            lastName: transactionDetail.LastName
        };
        $(".tpl-ctacallout a").hide();
        $(".tpl-ctacallout").append('<p class="message"><strong>Please wait while we set up your online account</strong></p>');
        var loaderAndError = EQ.Helpers.loaderAndErrorHandler($(".tpl-ctacallout"), {
            type: "popup"
        });
        loaderAndError.showLoader();
        setTimeout(function() {
            Join.ThankYouPage.ActivateAccount(user, loaderAndError);
        }, 1e4);
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var Leaderboard = App.Pages.Leaderboard = {};
    Leaderboard.init = function(id) {
        App.loadComponent("cycling-leaderboard", id, Leaderboard.getGender("gender"));
    };
    Leaderboard.getGender = function(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"), results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var Login = App.Pages.Login = {}, $loginForm = $("form.login");
    Login.validateAndSubmit = function() {
        if ($loginForm.data("publicMethods").isValid()) {
            $loginForm.data("publicMethods").sendAjaxRequest({
                username: "email",
                password: "password",
                persistLogin: "Login.RememberMe"
            }, function(data, textStatus, jqXHR) {
                if (jqXHR.status === 202) {
                    if (data.code === "LegacyUser") {
                        Login.ChangeLegacyUserName(data);
                        return;
                    }
                    if (data.code === "SpaOnlyUser") {
                        Login.RedirectToSpaPage(data);
                        return;
                    }
                }
                var returnUrl = decodeURIComponent(EQ.Helpers.getQueryStringVariable("ReturnUrl"));
                if (returnUrl === "false") {
                    var obFlag = data.hasAnsweredOnboardingQuestions || false;
                    if (!obFlag) {
                        global.location.href = "/questionnaire/start";
                    } else {
                        global.location.href = "/";
                    }
                } else {
                    global.location.href = returnUrl;
                }
            });
        }
    };
    Login.ChangeLegacyUserName = function(data) {
        var $form = $("<form></form>");
        $form.attr("action", "/help/change/username").attr("method", "POST");
        var $email = $('<input type="hidden"/>').attr("name", "email").val(data.email);
        var $userName = $('<input type="hidden"/>').attr("name", "userName").val(data.userName);
        $form.append($email);
        $form.append($userName);
        $("body").append($form);
        $form.submit();
    };
    Login.RedirectToSpaPage = function(data) {
        var $form = $("<form />");
        $form.attr("action", "/help/upgrade/spa-member").attr("method", "POST");
        var $firstName = $('<input type="hidden"/>').attr("name", "firstName").val(data.firstName);
        var $userId = $('<input type="hidden"/>').attr("name", "userId").val(data.userId);
        var $lastName = $('<input type="hidden"/>').attr("name", "lastName").val(data.lastName);
        $form.append($firstName);
        $form.append($userId);
        $form.append($lastName);
        $("body").append($form);
        $form.submit();
    };
    Login.Facebook = {
        bind: function() {
            $(".login-facebook").on("click", Login.Facebook.intent.bind(Login.Facebook));
        },
        intent: function() {
            window.track("regLoginWithFB");
            this.getToken(function(response) {
                debug("FBT:", response.accessToken);
                $.ajax(APIEndpoint + "/authentication/fblogin", {
                    data: {
                        accessToken: response.accessToken
                    },
                    type: "POST",
                    xhrFields: {
                        withCredentials: true
                    }
                }).done(function(data, textStatus, jqXHR) {
                    EQ.Helpers.createCookie("IsFBLogin", true, 1);
                    if (jqXHR.status === 202) {
                        if (data.code === "LegacyUser") {
                            Login.ChangeLegacyUserName(data);
                            return;
                        }
                        if (data.code === "SpaOnlyUser") {
                            Login.RedirectToSpaPage(data);
                            return;
                        }
                    }
                    var returnUrl = decodeURIComponent(EQ.Helpers.getQueryStringVariable("ReturnUrl"));
                    if (returnUrl === "false") {
                        var obFlag = data.hasAnsweredOnboardingQuestions === true;
                        if (!obFlag) {
                            global.location.href = "/questionnaire/start";
                        } else {
                            global.location.href = "/";
                        }
                    } else {
                        global.location.href = returnUrl;
                    }
                }).fail(function(data) {
                    try {
                        var failedResponse = data.responseJSON;
                        var errorMessage = failedResponse.error ? failedResponse.error.message : failedResponse.message;
                        if (failedResponse.error.messageId === 50019) {
                            FB.api("/me", function(profileResponse) {
                                global.location.href = "/login/connect?firstName=" + profileResponse.first_name + "&lastName=" + profileResponse.last_name;
                            });
                        } else {
                            $(".is-error").text(errorMessage).removeClass("hidden");
                        }
                    } catch (e) {
                        $(".is-error").text("").addClass("hidden");
                        debug("[FormSendAjaxRequest] Error logged into Crittercism:", e, arguments);
                    }
                });
            });
        },
        getToken: function(cb) {
            FB.login(function(response) {
                if (response.status === "connected") {
                    cb(response.authResponse);
                }
            }, {
                scope: "email,user_likes,user_friends"
            });
        }
    };
    Login.init = function() {
        debug("[Login] Init");
        if (typeof global.user !== "undefined" && !!global.user) {
            global.location.href = "/";
        }
        $loginForm.on("submit", function(e) {
            e.preventDefault();
            Login.validateAndSubmit();
        });
        App.Events.on("fbsdk:loaded", function() {
            Login.Facebook.bind();
        });
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var Mock = App.Pages.Mock = {}, _ = global._;
    Mock.Book = {};
    Mock.Book.init = function() {
        debug("[Mock.Book] Init");
        Mock.Book.bind();
    };
    Mock.Book.bind = function() {
        $(".bike-filters > li > a").on("click", function() {
            $(this).addClass("active");
            $(this).find("input").focus();
        });
        $(".bike-filters ul li a").on("click", function() {
            $(this).toggleClass("active");
        });
        $(".remove-filter").on("click", function(e) {
            e.stopPropagation();
            $(this).prev().val("");
            $(".bike-filters li a.active").removeClass("active");
        });
        $(".bike-filters .checkbox").on("change", function() {
            var label = $(this).find(".label").text(), icon = $(this).closest("ul[data-icon]").attr("data-icon"), $filter = $('<li data-filter="' + label + '" class="' + icon + '"><span>' + label + "</span></li>");
            if ($(this).hasClass("checked")) {
                $filter.appendTo(".added-filters");
            } else {
                $('.added-filters li[data-filter="' + label + '"]').remove();
            }
        });
    };
    Mock.Book.drawMap = function() {
        var $map = $(".bikes-graphic"), mapWidth = $map.width(), mapHeight, jsonData = Mock.Book.jsonMap, mapProportion = jsonData.layout.width / mapWidth, bikes = jsonData.layout.bikes, doors = jsonData.layout.doors;
        mapHeight = Math.floor(mapWidth * jsonData.layout.heigth / jsonData.layout.width);
        _.each(bikes, function(bike) {
            Mock.Book.drawBike(bike, mapProportion);
        });
        _.each(doors, function(door) {
            Mock.Book.drawDoor(door, mapProportion);
        });
    };
    Mock.Book.drawBike = function(bike, mapProportion) {
        var $map = $(".bikes-graphic"), $bike = $('<div class="bike">' + bike.localId + "</div>"), bikeLeft = Math.floor(bike.studioGridX / mapProportion), bikeTop = Math.floor(bike.studioGridY / mapProportion);
        $map.append($bike);
        $bike.css({
            top: bikeTop + "px",
            left: bikeLeft + "px"
        });
        if (bike.isDisabled === true) {
            $bike.addClass("unavailable");
        }
        if (bike.reserved === true) {
            $bike.addClass("selected");
        }
    };
    Mock.Book.drawDoor = function(door, mapProportion) {
        var $map = $(".bikes-graphic"), $door = $('<div class="door icon-door"></div>'), doorLeft = Math.floor(door.studioGridX / mapProportion), doorTop = Math.floor(door.studioGridY / mapProportion);
        $map.append($door);
        $door.css({
            top: doorTop + "px",
            left: doorLeft + "px"
        });
    };
    Mock.Book.jsonMap = {
        reservation: {
            result: null
        },
        layout: {
            clubId: 113,
            clubName: "50th St. @ Broadway",
            heigth: 475,
            width: 925,
            id: 104,
            name: "Cycling Studio",
            bikes: [ {
                clubId: 113,
                studioId: 104,
                studioGridY: 145,
                studioGridX: 320,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 1415,
                isDisabled: false,
                localId: 1,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 90,
                studioGridX: 320,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 1416,
                isDisabled: false,
                localId: 2,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 35,
                studioGridX: 320,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 1417,
                isDisabled: false,
                localId: 3,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 145,
                studioGridX: 420,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 1418,
                isDisabled: false,
                localId: 4,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 90,
                studioGridX: 420,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 1419,
                isDisabled: false,
                localId: 5,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 35,
                studioGridX: 420,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 1420,
                isDisabled: false,
                localId: 6,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 145,
                studioGridX: 515,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 1421,
                isDisabled: false,
                localId: 7,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 90,
                studioGridX: 515,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2747,
                isDisabled: false,
                localId: 8,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 35,
                studioGridX: 515,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2839,
                isDisabled: false,
                localId: 9,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 140,
                studioGridX: 690,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2840,
                isDisabled: false,
                localId: 10,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 195,
                studioGridX: 690,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2841,
                isDisabled: false,
                localId: 11,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 250,
                studioGridX: 690,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2842,
                isDisabled: false,
                localId: 12,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 305,
                studioGridX: 690,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2843,
                isDisabled: false,
                localId: 13,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 360,
                studioGridX: 690,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2844,
                isDisabled: false,
                localId: 14,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 415,
                studioGridX: 690,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2845,
                isDisabled: false,
                localId: 15,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 195,
                studioGridX: 605,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2846,
                isDisabled: false,
                localId: 16,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 250,
                studioGridX: 605,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2847,
                isDisabled: false,
                localId: 17,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 305,
                studioGridX: 605,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2848,
                isDisabled: false,
                localId: 18,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 360,
                studioGridX: 605,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2849,
                isDisabled: false,
                localId: 19,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 415,
                studioGridX: 605,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2850,
                isDisabled: false,
                localId: 20,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 410,
                studioGridX: 480,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2851,
                isDisabled: false,
                localId: 21,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 410,
                studioGridX: 415,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2852,
                isDisabled: false,
                localId: 22,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 410,
                studioGridX: 350,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2853,
                isDisabled: false,
                localId: 23,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 410,
                studioGridX: 290,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2854,
                isDisabled: false,
                localId: 24,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 410,
                studioGridX: 230,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2855,
                isDisabled: false,
                localId: 25,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 410,
                studioGridX: 165,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2856,
                isDisabled: false,
                localId: 26,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 410,
                studioGridX: 55,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2857,
                isDisabled: false,
                localId: 27,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 300,
                studioGridX: 445,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 2858,
                isDisabled: false,
                localId: 28,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 300,
                studioGridX: 330,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 3160,
                isDisabled: false,
                localId: 29,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 300,
                studioGridX: 260,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 3612,
                isDisabled: false,
                localId: 30,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 300,
                studioGridX: 190,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 3613,
                isDisabled: false,
                localId: 31,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 300,
                studioGridX: 120,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 3614,
                isDisabled: false,
                localId: 32,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 300,
                studioGridX: 55,
                gridItemTypeId: 1,
                gridItemType: "Bike",
                gridItemImage: "bike.jpg",
                reservableEquipId: 3615,
                isDisabled: false,
                localId: 33,
                equipmentName: "Bike",
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: 1
            } ],
            doors: [ {
                clubId: 113,
                studioId: 104,
                studioGridY: 35,
                studioGridX: 695,
                gridItemTypeId: 5,
                gridItemType: "Door - Bottom Left",
                gridItemImage: "doorBL.gif",
                reservableEquipId: null,
                isDisabled: null,
                localId: null,
                equipmentName: null,
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: null
            }, {
                clubId: 113,
                studioId: 104,
                studioGridY: 85,
                studioGridX: 695,
                gridItemTypeId: 5,
                gridItemType: "Door - Bottom Left",
                gridItemImage: "doorBL.gif",
                reservableEquipId: null,
                isDisabled: null,
                localId: null,
                equipmentName: null,
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: null
            } ],
            instructors: [ {
                clubId: 113,
                studioId: 104,
                studioGridY: 55,
                studioGridX: 100,
                gridItemTypeId: 2,
                gridItemType: "Instructor",
                gridItemImage: "instructor.gif",
                reservableEquipId: null,
                isDisabled: null,
                localId: null,
                equipmentName: null,
                reserved: false,
                reservedByUserSecId: null,
                equipmentId: null
            } ]
        },
        strikes: {
            count: 0,
            expiresOn: "2014-02-22T06:05:34.9173881-05:00"
        }
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var Leads = App.Pages.Leads = {};
    var popupRef;
    Leads.POPUP_LEAD = "POPUP LEAD";
    Leads.PAGE_LEAD = "PAGE LEAD";
    Leads.ERROR = "ERROR";
    Leads.common = {
        scrollWindow: function(options) {
            switch (options.scrollFor) {
              case Leads.POPUP_LEAD:
                $("html, body").animate({
                    scrollTop: 0
                });
                break;

              case Leads.PAGE_LEAD:
                $("html, body").animate({
                    scrollTop: $("#schedule-a-visit").offset().top - $('[data-component="navigation"]').height() + 20
                });
                break;

              case Leads.ERROR:
                $("html, body").animate({
                    scrollTop: options.context.$(".error").offset().top - (options.whichLead === Leads.PAGE_LEAD ? $('[data-component="navigation"]').height() + 20 : 20)
                });
                break;
            }
        },
        fillRegionClubDropdown: function(options) {
            var regionDefaultText = "Select a region", clubDefaultText1 = "You must select a region first", clubDefaultText2 = "Select a club", $regionDropdown = options.$region.find("select"), $clubDropdown = options.$club.find("select"), $regionsOption = '<option data-slug="">' + regionDefaultText + "</option>", club = {};
            $.each(global.allRegionsData, function(i, region) {
                if (region && region.SubRegions && region.SubRegions.length) {
                    var facilities = [];
                    $regionsOption += '<option data-slug="' + region.ShortName + '">' + region.Name + "</option>";
                    $.each(region.SubRegions, function(j, subregion) {
                        facilities = facilities.concat(subregion.Facilities);
                    });
                    club[region.Name] = facilities;
                } else {
                    $regionsOption += '<option data-slug="' + region.ShortName + '">' + region.Name + "</option>";
                    club[region.Name] = region.Facilities;
                }
            });
            $regionDropdown.html($regionsOption);
            $clubDropdown.prepend('<option selected data-id="">' + clubDefaultText1 + "</option>");
            $regionDropdown.on("change", function() {
                var currentFacilities = club[$(this).val()], $clubsOptions = "";
                if (currentFacilities) {
                    $.each(currentFacilities, function(i, facility) {
                        if (!(facility.IsAvailableOnline === false && facility.IsPresale === false)) {
                            $clubsOptions += '<option data-id="' + facility.Id + '">' + facility.ClubName + "</option>";
                        }
                    });
                    $clubDropdown.html($clubsOptions);
                    $clubDropdown.each(function() {
                        var options = $(this).children("option");
                        options.sort(function(optionA, optionB) {
                            return optionA.value.localeCompare(optionB.value);
                        });
                        $(this).empty().append(options);
                    });
                    $clubDropdown.prepend('<option selected data-id="">' + clubDefaultText2 + "</option>");
                    $clubDropdown.trigger("change");
                } else {
                    $clubDropdown.siblings(".option").html(clubDefaultText1);
                    $clubDropdown.html('<option selected data-id="">' + clubDefaultText1 + "</option>");
                }
            });
            $regionDropdown.trigger("change");
        },
        defaultRegionClubSelect: function(options) {
            var $regionDropdown = options.$region.find("select"), $clubDropdown = options.$club.find("select");
            if (window.currentClub) {
                if (window.selectedRegion) {
                    $regionDropdown.find("option").each(function(i, el) {
                        if ($(el).data("slug") === window.selectedRegion) {
                            $regionDropdown.prop("selectedIndex", i).trigger("change");
                        }
                    });
                }
                if (window.currentClub) {
                    $clubDropdown.find("option").each(function(i, el) {
                        if ($(el).data("id") === +window.currentClub) {
                            $clubDropdown.prop("selectedIndex", i).trigger("change");
                        }
                    });
                }
            }
        },
        validateStep1: function(options) {
            var Validators = {
                email: function(value) {
                    return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(value);
                },
                digits: function(value) {
                    return /^\d+$/.test(value);
                },
                phone: function(value) {
                    return /^[0-9\-()\s]*$/.test(value);
                },
                onlyAlphanumericAndSpaces: function(value) {
                    return /^[a-zA-Z\s]+$/.test(value);
                }
            };
            options.context.$(".error").removeClass("error");
            if (options.dom.$firstName.val().length < 1 || Validators.onlyAlphanumericAndSpaces(options.dom.$firstName.val()) === false) {
                options.dom.$firstName.addClass("error");
                options.dom.$firstName.closest(".control").siblings(".control-title").addClass("error");
            } else {
                options.dom.$firstName.removeClass("error");
                options.dom.$firstName.closest(".control").siblings(".control-title").removeClass("error");
            }
            if (options.dom.$lastName.val().length < 1 || Validators.onlyAlphanumericAndSpaces(options.dom.$lastName.val()) === false) {
                options.dom.$lastName.addClass("error");
                options.dom.$lastName.closest(".control").siblings(".control-title").addClass("error");
            } else {
                options.dom.$lastName.removeClass("error");
                options.dom.$lastName.closest(".control").siblings(".control-title").removeClass("error");
            }
            if (options.dom.$email.length === 1) {
                if (options.dom.$email.val().length < 3 || Validators.email(options.dom.$email.val()) === false) {
                    options.dom.$email.addClass("error");
                    options.dom.$email.closest(".control").siblings(".control-title").addClass("error");
                } else {
                    options.dom.$email.removeClass("error");
                    options.dom.$email.closest(".control").siblings(".control-title").removeClass("error");
                }
            }
            if (options.dom.$phone.val().length < 1) {
                options.dom.$phone.addClass("error");
                options.dom.$phone.closest(".control").siblings(".control-title").addClass("error");
            } else if (options.dom.$phone.val().length > 1 && Validators.phone(options.dom.$phone.val()) === true) {
                options.dom.$phone.removeClass("error");
                options.dom.$phone.closest(".control").siblings(".control-title").removeClass("error");
            } else {
                options.dom.$phone.removeClass("error");
                options.dom.$phone.closest(".control").siblings(".control-title").removeClass("error");
            }
            if (options.dom.$region.find("select option").filter(":selected").data("slug") === "") {
                options.dom.$region.addClass("error");
                options.dom.$region.closest(".control").siblings(".control-title").addClass("error");
            } else {
                options.dom.$region.removeClass("error");
                options.dom.$region.closest(".control").siblings(".control-title").removeClass("error");
            }
            if (options.dom.$club.find("select option").filter(":selected").data("id") === "") {
                options.dom.$club.addClass("error");
                options.dom.$club.closest(".control").siblings(".control-title").addClass("error");
            } else {
                options.dom.$club.removeClass("error");
                options.dom.$club.closest(".control").siblings(".control-title").removeClass("error");
            }
        },
        submitStep1: function(options) {
            options.e.preventDefault();
            var self = this;
            var $target = $(options.e.target);
            var ENDPOINT_URL = "/leads/step1";
            if ($target.hasClass("submitting")) {
                return;
            }
            this.validateStep1({
                context: options.context,
                dom: options.dom
            });
            if (options.context.$(".error").length === 0) {
                var data = {
                    nameFirst: options.dom.$firstName.val(),
                    nameLast: options.dom.$lastName.val(),
                    transactionId: options.dom.$transationId.val(),
                    activationCode: options.dom.$activationCode.val(),
                    facilityKey: options.dom.$club.find("select option").filter(":selected").data("id"),
                    emailAddress: options.dom.$email.val(),
                    phoneNumber: options.dom.$phone.val(),
                    userLocation: options.dom.$region.find("select").val() || "NoRegion",
                    qa: ""
                };
                this.step1Data = data;
                console.log("Step1 Data: ", data);
                $target.text("Loading...");
                $target.addClass("submitting");
                $.ajax({
                    type: "POST",
                    url: ENDPOINT_URL,
                    data: JSON.stringify(data),
                    contentType: "application/json",
                    headers: {
                        "Eqx-Version": "1"
                    }
                }).success(function(response) {
                    self.scrollWindow({
                        scrollFor: options.scrollFor
                    });
                    if (response.Success === "false") {
                        options.dom.$step1ControlForm.hide();
                        options.dom.$step1ErrorWrapper.fadeIn("fast");
                    } else {
                        self.step1Data.tokenId = response.TokenId;
                        self.renderStep2({
                            scrollFor: options.scrollFor,
                            dom: options.dom
                        });
                    }
                }).error(function() {
                    self.scrollWindow({
                        scrollFor: options.scrollFor
                    });
                    self.replaceEl({
                        $el: options.dom.$step1ErrorTitle,
                        placeholder: "##NAME##",
                        value: self.step1Data.nameFirst
                    });
                    options.dom.$step1ControlForm.hide();
                    options.dom.$step1ErrorWrapper.fadeIn("fast");
                });
            } else {
                this.scrollWindow({
                    context: options.context,
                    whichLead: options.scrollFor,
                    scrollFor: Leads.ERROR
                });
            }
        },
        renderStep2: function(options) {
            this.scrollWindow({
                scrollFor: options.scrollFor
            });
            options.dom.$step1.hide();
            options.dom.$step2.fadeIn("fast");
            this.replaceEl({
                $el: options.dom.$step2Description,
                placeholder: "##NAME##",
                value: this.step1Data.nameFirst
            });
            this.replaceEl({
                $el: options.dom.$step2ThanksTitle,
                placeholder: "##NAME##",
                value: this.step1Data.nameFirst
            });
            this.replaceEl({
                $el: options.dom.$step2ErrorTitle,
                placeholder: "##NAME##",
                value: this.step1Data.nameFirst
            });
        },
        replaceEl: function(options) {
            var txt = options.$el.text();
            if (txt) {
                options.$el.html(txt.replace(options.placeholder, options.value));
            }
        },
        toggleOtherInterests: function(options) {
            this.toggleEl({
                $el: options.$otherInterests
            });
        },
        toggleOtherGoals: function(options) {
            this.toggleEl({
                $el: options.$otherGoals
            });
        },
        toggleEl: function(options) {
            if (options.$el.is(":visible")) {
                options.$el.hide();
            } else {
                options.$el.show();
                options.$el.focus();
            }
        },
        submitStep2: function(options) {
            options.e.preventDefault();
            var self = this;
            var $target = $(options.e.target);
            var ENDPOINT_URL = "/leads/thank-you";
            if ($target.hasClass("submitting")) {
                return;
            }
            var notes = "";
            var question;
            var Arr = "";
            options.dom.$row.each(function() {
                var $this = $(this);
                var $answerOptions = $this.find(".answer-options");
                question = $this.find(".question-heading h3").text() === "I'm interested in" ? "Interested in" : $this.find(".question-heading h3").text();
                var ansLen, answer, answerArr = "", singleAnswer, combinedSingleAns = "", questionText, qa;
                if ($answerOptions.find("input").is(":radio")) {
                    answer = $answerOptions.find(":checked").val();
                    if (answer) {
                        singleAnswer = "<Answer>";
                        singleAnswer += "<answerText>" + answer + "</answerText>";
                        singleAnswer += "<additionalInformation></additionalInformation>";
                        singleAnswer += "</Answer>";
                        combinedSingleAns += singleAnswer;
                        answerArr = "<answers>" + combinedSingleAns.split(",").join("") + "</answers>";
                        questionText = "<questionText>" + $this.find(".question").text() + "</questionText>";
                        qa = "<QuestionAnswers>" + questionText + answerArr + "</QuestionAnswers>";
                    } else {
                        return;
                    }
                } else if ($answerOptions.find("select").length) {
                    answer = $answerOptions.find("select").val();
                    if (answer) {
                        singleAnswer = "<Answer>";
                        singleAnswer += "<answerText>" + answer + "</answerText>";
                        singleAnswer += "<additionalInformation></additionalInformation>";
                        singleAnswer += "</Answer>";
                        combinedSingleAns += singleAnswer;
                        answerArr = "<answers>" + combinedSingleAns.split(",").join("") + "</answers>";
                        questionText = "<questionText>" + $this.find(".question").text() + "</questionText>";
                        qa = "<QuestionAnswers>" + questionText + answerArr + "</QuestionAnswers>";
                    } else {
                        return;
                    }
                } else if ($answerOptions.find("input").is(":checkbox")) {
                    ansLen = $answerOptions.find(":checked").length;
                    var chkBoxansArr = [];
                    if (ansLen > 0) {
                        for (var k = 0; k < ansLen; k++) {
                            answer = $answerOptions.find(":checked").eq(k).closest(".checkbox").find(".control-title").text();
                            if (answer.toLowerCase() !== "other") {
                                singleAnswer = "<Answer>";
                                singleAnswer += "<answerText>" + answer + "</answerText>";
                                singleAnswer += "<additionalInformation></additionalInformation>";
                                singleAnswer += "</Answer>";
                                combinedSingleAns += singleAnswer;
                                chkBoxansArr.push(answer);
                            }
                        }
                        if (chkBoxansArr.length > -1) {
                            answer = chkBoxansArr.toString();
                        }
                    }
                    var $other = $answerOptions.find(".other");
                    var otherValue = $.trim($other.val());
                    if ($other.is(":visible") && otherValue !== "") {
                        if (answer) {
                            answer += ", other(" + otherValue + ")";
                        } else {
                            answer = "other(" + otherValue + ")";
                        }
                        singleAnswer = "<Answer>";
                        singleAnswer += "<answerText>other</answerText>";
                        singleAnswer += "<additionalInformation>" + otherValue + "</additionalInformation>";
                        singleAnswer += "</Answer>";
                        combinedSingleAns += singleAnswer;
                    }
                    if (combinedSingleAns !== "") {
                        var chkQuestion = $this.find(".question").text() === "I'm interested in" ? "Interested in" : $this.find(".question").text();
                        answerArr = "<answers>" + combinedSingleAns.split(",").join("") + "</answers>";
                        questionText = "<questionText>" + chkQuestion + "</questionText>";
                        qa = "<QuestionAnswers>" + questionText + answerArr + "</QuestionAnswers>";
                    } else {
                        return;
                    }
                }
                Arr += qa;
                if (answer) {
                    notes += "\n\n" + question + ": " + answer;
                }
            });
            Arr = Arr.split(",").join("");
            var BigArr = Arr ? "<questionsAnswers>" + Arr + "</questionsAnswers>" : "";
            notes = notes.toUpperCase();
            var data = {
                nameFirst: this.step1Data.nameFirst,
                nameLast: this.step1Data.nameLast,
                outreachCode: this.step1Data.activationCode,
                facilityId: this.step1Data.facilityKey,
                emailAddress: this.step1Data.emailAddress,
                phone: this.step1Data.phoneNumber,
                tokenId: this.step1Data.tokenId,
                notes: notes,
                qa: BigArr
            };
            console.log("Step2 Data: ", data);
            console.log("qa:", BigArr);
            console.log("notes:", notes);
            $target.text("Loading...");
            $target.addClass("submitting");
            $.ajax({
                type: "POST",
                url: ENDPOINT_URL,
                data: JSON.stringify(data),
                contentType: "application/json",
                headers: {
                    "Eqx-Version": "1"
                }
            }).success(function(response) {
                options.dom.$step2ControlForm.hide();
                self.scrollWindow({
                    scrollFor: options.scrollFor
                });
                if (response) {
                    options.dom.$step2SuccessWrapper.fadeIn("fast");
                } else {
                    options.dom.$step2ErrorWrapper.fadeIn("fast");
                }
            }).error(function() {
                self.scrollWindow({
                    scrollFor: options.scrollFor
                });
                options.dom.$step2ErrorWrapper.fadeIn("fast");
            });
        }
    };
    Leads.Popup = Backbone.View.extend({
        id: "lead-popup-wrapper",
        tpl: {
            overlay: '<div id="lead-popup-overlay"></div>',
            loader: '<div class="loader"><div class="loader-circles bounce1"></div><div class="loader-circles bounce2"></div><div class="loader-circles bounce3"></div></div>'
        },
        events: {
            "click .close-popup": "closePopup",
            "change .otherInterestsOption": "toggleOtherInterests",
            "change .otherGoalsOption": "toggleOtherGoals",
            "click .submit-step1": "submitStep1",
            "click .submit-step2": "submitStep2"
        },
        initialize: function() {
            popupRef = this;
            this.dom = {};
        },
        render: function() {
            $("#lead-popup-wrapper").remove();
            this.$el.append(this.tpl.overlay);
            this.$el.append(this.tpl.loader);
            $("body").append(this.$el);
            Leads.common.scrollWindow({
                scrollFor: Leads.POPUP_LEAD
            });
            this.getContent();
        },
        getContent: function() {
            $.ajax({
                url: "/leads/popuplead"
            }).done(this.renderPopup).fail(function() {
                console.log("Unable to get lead form content");
            });
        },
        renderPopup: function(data) {
            popupRef.$(".loader").hide();
            popupRef.$el.append(data);
            popupRef.dom.$leadPopupContent = popupRef.$("#lead-popup-content");
            popupRef.dom.$step1 = popupRef.$(".step1");
            popupRef.dom.$step2 = popupRef.$(".step2");
            popupRef.dom.$step1ControlForm = popupRef.$(".step1 .control-form");
            popupRef.dom.$step1ErrorTitle = popupRef.$(".step1-error-title");
            popupRef.dom.$step1ErrorWrapper = popupRef.$(".step1 .error-wrapper");
            popupRef.dom.$step2ControlForm = popupRef.$(".step2 .control-form");
            popupRef.dom.$step2Description = popupRef.$(".step2-description");
            popupRef.dom.$step2ThanksTitle = popupRef.$(".step2-thanks-title");
            popupRef.dom.$step2ErrorTitle = popupRef.$(".step2-error-title");
            popupRef.dom.$step2SuccessWrapper = popupRef.$(".step2 .success-wrapper");
            popupRef.dom.$step2ErrorWrapper = popupRef.$(".step2 .error-wrapper");
            popupRef.dom.$row = popupRef.$(".row");
            popupRef.dom.$firstName = popupRef.$(".first-name");
            popupRef.dom.$lastName = popupRef.$(".last-name");
            popupRef.dom.$region = popupRef.$(".region");
            popupRef.dom.$club = popupRef.$(".club");
            popupRef.dom.$email = popupRef.$(".email");
            popupRef.dom.$phone = popupRef.$(".phone");
            popupRef.dom.$otherInterests = popupRef.$(".otherInterests");
            popupRef.dom.$otherGoals = popupRef.$(".otherGoals");
            popupRef.dom.$transationId = popupRef.$(".transation-id");
            popupRef.dom.$activationCode = popupRef.$(".activation-code");
            App.renderComponents(popupRef.dom.$leadPopupContent);
            Leads.common.fillRegionClubDropdown({
                $region: popupRef.dom.$region,
                $club: popupRef.dom.$club
            });
            Leads.common.defaultRegionClubSelect({
                $region: popupRef.dom.$region,
                $club: popupRef.dom.$club
            });
            popupRef.dom.$leadPopupContent.fadeIn("fast");
            if ($(".takeover-module").is(":visible")) {
                $("body").css("overflow", "auto");
            }
        },
        closePopup: function(e) {
            e.preventDefault();
            $("#lead-popup-wrapper").fadeOut("fast", function() {
                $(this).remove();
                if ($(".takeover-module").is(":visible")) {
                    $("body").css("overflow", "hidden");
                }
            });
        },
        toggleOtherInterests: function() {
            console.log("Popup Lead: Other Interests");
            Leads.common.toggleOtherInterests({
                $otherInterests: this.dom.$otherInterests
            });
        },
        toggleOtherGoals: function() {
            console.log("Popup Lead: Other Goals");
            Leads.common.toggleOtherGoals({
                $otherGoals: this.dom.$otherGoals
            });
        },
        submitStep1: function(e) {
            console.log("Popup Lead: Step 1 Submit");
            Leads.common.submitStep1({
                e: e,
                context: this,
                dom: this.dom,
                scrollFor: Leads.POPUP_LEAD
            });
        },
        submitStep2: function(e) {
            console.log("Popup Lead: Step 2 Submit");
            Leads.common.submitStep2({
                e: e,
                dom: this.dom,
                scrollFor: Leads.POPUP_LEAD
            });
        }
    });
    Leads.Page = Backbone.View.extend({
        el: "#lead-page-wrapper",
        events: {
            "change .otherInterestsOption": "toggleOtherInterests",
            "change .otherGoalsOption": "toggleOtherGoals",
            "click .submit-step1": "submitStep1",
            "click .submit-step2": "submitStep2"
        },
        initialize: function() {
            this.dom = {};
        },
        render: function() {
            this.dom.$leadPageWrapper = this.$("#lead-form-wrapper");
            this.dom.$step1 = this.$(".step1");
            this.dom.$step2 = this.$(".step2");
            this.dom.$step1ControlForm = this.$(".step1 .control-form");
            this.dom.$step1ErrorTitle = this.$(".step1-error-title");
            this.dom.$step1ErrorWrapper = this.$(".step1 .error-wrapper");
            this.dom.$step2ControlForm = this.$(".step2 .control-form");
            this.dom.$step2Description = this.$(".step2-description");
            this.dom.$step2ThanksTitle = this.$(".step2-thanks-title");
            this.dom.$step2ErrorTitle = this.$(".step2-error-title");
            this.dom.$step2SuccessWrapper = this.$(".step2 .success-wrapper");
            this.dom.$step2ErrorWrapper = this.$(".step2 .error-wrapper");
            this.dom.$row = this.$(".row");
            this.dom.$firstName = this.$(".first-name");
            this.dom.$lastName = this.$(".last-name");
            this.dom.$region = this.$(".region");
            this.dom.$club = this.$(".club");
            this.dom.$email = this.$(".email");
            this.dom.$phone = this.$(".phone");
            this.dom.$otherInterests = this.$(".otherInterests");
            this.dom.$otherGoals = this.$(".otherGoals");
            this.dom.$transationId = this.$(".transation-id");
            this.dom.$activationCode = this.$(".activation-code");
            App.renderComponents(this.dom.$leadPageWrapper);
            Leads.common.fillRegionClubDropdown({
                $region: this.dom.$region,
                $club: this.dom.$club
            });
            Leads.common.defaultRegionClubSelect({
                $region: this.dom.$region,
                $club: this.dom.$club
            });
        },
        toggleOtherInterests: function() {
            console.log("Page Lead: Other Interests");
            Leads.common.toggleOtherInterests({
                $otherInterests: this.dom.$otherInterests
            });
        },
        toggleOtherGoals: function() {
            console.log("Page Lead: Other Goals");
            Leads.common.toggleOtherGoals({
                $otherGoals: this.dom.$otherGoals
            });
        },
        submitStep1: function(e) {
            console.log("Page Lead: Step 1 Submit");
            Leads.common.submitStep1({
                e: e,
                context: this,
                dom: this.dom,
                scrollFor: Leads.PAGE_LEAD
            });
        },
        submitStep2: function(e) {
            console.log("Page Lead: Step 2 Submit");
            Leads.common.submitStep2({
                e: e,
                dom: this.dom,
                scrollFor: Leads.PAGE_LEAD
            });
        }
    });
    Leads.PopupInit = function() {
        var leadPopup = new Leads.Popup();
        leadPopup.render();
        console.log("Lead Popup");
    };
    Leads.PageInit = function() {
        var leadPage = new Leads.Page();
        leadPage.render();
        console.log("Lead Page");
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    App.Pages.Notifications = {};
    var Notifications = App.Pages.Notifications;
    var Notification = Backbone.Model.extend({
        defaults: {
            description: "",
            time: moment().format("h:hh A"),
            type: 0
        }
    });
    var NotificationsCollection = Backbone.Collection.extend({
        model: Notification
    });
    var NotificationsListView = Backbone.View.extend({
        render: function() {
            var notificationCount = $(".notifications-container h2 .count", this.$el), notificationsList = $(".notifications", this.$el), notificationsGroupView;
            notificationsGroupView = new NotificationsGroupView({
                collection: this.collection
            });
            notificationsList.prepend(notificationsGroupView.render().el);
            notificationCount.text(this.collection.length);
            return this;
        }
    });
    var NotificationsGroupView = Backbone.View.extend({
        className: "notification-group",
        template: _.template($("#notificationsGroupView").html()),
        render: function() {
            var that = this;
            this.$el.html(this.template({
                date: "today"
            }));
            this.collection.each(function(notification) {
                var notificationItem = new NotificationSingleView({
                    model: notification
                });
                that.$el.find(".notification-list").append(notificationItem.render().el);
            });
            return this;
        }
    });
    var NotificationSingleView = Backbone.View.extend({
        tagName: "li",
        className: "notification",
        template: _.template($("#notificationSingleView").html()),
        render: function() {
            var type = this.model.get("type"), colorClass = type === 1 ? "red" : "yellow", time = moment(this.model.get("date")).format("h:hh A");
            this.model.set("time", time);
            this.$el.addClass(colorClass);
            this.$el.html(this.template(this.model.toJSON()));
            return this;
        }
    });
    Notifications.init = function() {
        var notificationsPage = $(".notifications-page"), endDate = moment().subtract("days", 2);
        $.ajax({
            type: "GET",
            url: APIEndpoint + "/me/notifications?until=" + endDate.format("YYYY-MM-DD"),
            contentType: "application/json",
            xhrFields: {
                withCredentials: true
            },
            dataType: "json",
            success: function(notifications) {
                var notificationCollection, notificationListView;
                debug("[NOTIFICATIONS SERVICE OK]", notifications);
                $.each(notifications, function(index, notification) {
                    if (moment().isSame(moment(notification.date).format("YYYY-MM-DD"))) {
                        console.log(index);
                    }
                    console.log(moment());
                    console.log(notification.date);
                });
                notificationCollection = new NotificationsCollection(notifications);
                notificationListView = new NotificationsListView({
                    collection: notificationCollection,
                    el: notificationsPage
                });
                notificationListView.render();
            },
            error: function(d) {
                debug("server error", d.responseJSON);
            }
        });
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var OnBoarding = App.Pages.OnBoarding = {}, $container = $(".page");
    OnBoarding.Q1 = {
        bind: function() {
            debug("[onboarding] binding Q1 events");
            var that = this;
            $('#ContactOptions option[value="Twitter"]').remove();
            this.form.on("submit", function(e) {
                e.preventDefault();
                that.saveForm();
                window.track("regOnboardSubmit");
                debug("[regOnboardSubmit] regOnboardSubmit event");
            });
            $(document).find(".highlight").on("click", function() {
                window.track("regOnboardCancel");
                debug("[regOnboardCancel] regOnboardCancel event");
            });
            $(document).find("#onboard-skipQuestion").on("click", function() {
                window.track("regOnboardSkip");
                debug("[regOnboardSkip] regOnboardSkip event");
            });
            $(".question #anytime", this.form).on("change", function() {
                var dateTimeCheckbox = $(".question .datetime-select", this.form);
                if ($(this).is(":checked")) {
                    dateTimeCheckbox.addClass("hidden");
                } else {
                    dateTimeCheckbox.removeClass("hidden");
                }
            });
        },
        saveForm: function() {
            var phoneNumber = $("input[type=tel]", this.form), email = $("input[type=email]", this.form), Validators = {
                email: function(value) {
                    return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(value);
                },
                usPhoneNumber: function(value) {
                    return /[01]?[- .]?(\([2-9]\d{2}\)|[2-9]\d{2})[- .]?\d{3}[- .]?\d{4}/.test(value);
                },
                ukPhoneNumber: function(value) {
                    return /\(?(?:(?:0(?:0|11)\)?[\s-]?\(?|\+)44\)?[\s-]?\(?(?:0\)?[\s-]?\(?)?|0)(?:\d{2}\)?[\s-]?\d{4}[\s-]?\d{4}|\d{3}\)?[\s-]?\d{3}[\s-]?\d{3,4}|\d{4}\)?[\s-]?(?:\d{5}|\d{3}[\s-]?\d{3})|\d{5}\)?[\s-]?\d{4,5}|8(?:00[\s-]?11[\s-]?11|45[\s-]?46[\s-]?4\d))(?:(?:[\s-]?(?:x|ext\.?\s?|\#)\d+)?)/.test(value);
                }
            }, error = "";
            var isPhoneNumber = window.user.SourceSystem === 1 || window.user.SourceSystem === 5 ? Validators.usPhoneNumber(phoneNumber.val()) : Validators.ukPhoneNumber(phoneNumber.val());
            if (email.length > 0) {
                if (email.val() === "" || !Validators.email(email.val())) {
                    email.addClass("error");
                    error = "Please check your email.";
                } else {
                    email.removeClass("error");
                }
            } else if (phoneNumber.length > 0) {
                if (phoneNumber.val() === "" || !isPhoneNumber) {
                    phoneNumber.addClass("error");
                    error = "Please check your Phone number.";
                } else {
                    phoneNumber.removeClass("error");
                }
            }
            if (this.form.find(".error").length > 0) {
                OnBoarding.dispayError(error);
                return;
            }
            $("form .is-error").addClass("hidden");
            var data = {
                facilityId: $(".club select option:selected", this.form).data("facility-id"),
                email: email.length > 0 ? email.val() : "",
                phoneNumber: phoneNumber.length > 0 ? phoneNumber.val() : "",
                comments: $("textarea[id=message]", this.form).val(),
                isAnytime: false,
                preferredDay: "",
                preferredTime: "",
                refreshCache: true
            };
            var anytime = $("input[id=anytime]", this.form).prop("checked");
            if (anytime) {
                data.isAnytime = true;
            } else {
                data.preferredDay = $("select[id=DayOptions]", this.form).val();
                data.preferredTime = $("select[id=TimeOptions]", this.form).val();
            }
            var $input = $("form").find('input[type="submit"]');
            $input.data("old-copy", $input.val());
            $input.val("Loading...").attr("disabled", true);
            var endPoint = APIEndpoint + "/personal-training/schedule-equifit-assessment";
            $.ajax({
                url: endPoint,
                contentType: "application/json",
                data: JSON.stringify(data),
                type: "POST",
                xhrFields: {
                    withCredentials: true
                }
            }).done(function(response) {
                debug("ONBOARDING RESPONSE", response);
                OnBoarding.redirect();
            }).fail(function() {
                debug("Server Error");
                var $input = $("form").find('input[type="submit"]');
                $input.val($input.data("old-copy")).attr("disabled", false);
            });
        },
        init: function() {
            this.form = $("form.join-schedule-form");
            this.bind();
        }
    };
    OnBoarding.Q2 = {
        bind: function() {
            debug("[onboarding] binding Q2 events");
            var that = this;
            this.form.on("submit", function(e) {
                e.preventDefault();
                that.saveForm();
                window.track("regOnboardSubmit");
                debug("[regOnboardSubmit] regOnboardSubmit event");
            });
            $(document).find(".highlight").on("click", function() {
                window.track("regOnboardCancel");
                debug("[regOnboardCancel] regOnboardCancel event");
            });
            $(document).find("#onboard-skipQuestion").on("click", function() {
                window.track("regOnboardSkip");
                debug("[regOnboardSkip] regOnboardSkip event");
            });
        },
        saveForm: function() {
            var qId = $("input[name=questionId]", this.form).val(), aId = $("input[name=answer]", this.form).val(), data;
            data = {
                questionId: qId,
                answerId: aId,
                answerText: "",
                isSelected: true
            };
            OnBoarding.updateAnswers(data, OnBoarding.redirect, true);
        },
        init: function() {
            this.form = $("form");
            this.bind();
        }
    };
    OnBoarding.Q3 = {
        bind: function() {
            debug("[onboarding] binding Q3_Q4 events");
            var self = this, otherAnswer = $("textarea[name=otherAnswerText]", self.form);
            $(document).find(".highlight").on("click", function() {
                window.track("regOnboardCancel");
                debug("[regOnboardCancel] regOnboardCancel event");
            });
            $(document).find("#onboard-skipQuestion").on("click", function() {
                window.track("regOnboardSkip");
                debug("[regOnboardSkip] regOnboardSkip event");
            });
            self.form.on("submit", function(e) {
                e.preventDefault();
                self.saveForm();
                window.track("regOnboardSubmit");
                debug("[regOnboardSubmit] regOnboardSubmit event");
            });
            $("label.check-selector", self.form).on("click", function() {
                self.toggleCheck($(this));
            });
            if (otherAnswer.length) {
                otherAnswer.on("change", function() {
                    self.toggleAnswer(otherAnswer);
                });
            }
        },
        toggleAnswer: function(el) {
            if (el.val() !== "") {
                if (this.checkCount < this.maxSelections) {
                    this.checkCount++;
                }
            } else {
                if (this.checkCount > 0) {
                    this.checkCount--;
                }
            }
            this.toggleSelections();
        },
        toggleCheck: function(el) {
            var check = el.find("input[type=checkbox]");
            if (this.maxSelections === 1) {
                $("label.check-selector input[type=checkbox]").each(function() {
                    if ($(this).val() !== check.val()) {
                        $(this).prop("checked", false);
                        $(this).parents("label.check-selector").removeClass("checked");
                    }
                });
                if (check.not(":checked")) {
                    el.removeClass("checked");
                    if (this.checkCount > 0) {
                        this.checkCount--;
                    }
                }
            }
            if (check.is(":checked") && this.checkCount < this.maxSelections && !el.hasClass("checked")) {
                el.addClass("checked");
                this.checkCount++;
            } else if (el.hasClass("checked")) {
                el.removeClass("checked");
                if (this.checkCount > 0) {
                    this.checkCount--;
                }
            }
            this.toggleSelections();
        },
        toggleSelections: function() {
            if (this.checkCount === this.maxSelections) {
                if (this.maxSelections !== 1) {
                    $("label.check-selector input[type=checkbox]").not(":checked").each(function() {
                        $(this).prop("disabled", true);
                    });
                }
                if ($("textarea[name=otherAnswerText]", this.form).val() === "") {
                    $("textarea[name=otherAnswerText]", this.form).prop("disabled", true);
                }
            } else if (this.checkCount < this.maxSelections) {
                $("label.check-selector input[type=checkbox][disabled]").each(function() {
                    $(this).prop("disabled", false);
                });
                if ($("textarea[name=otherAnswerText]", this.form).val() === "") {
                    $("textarea[name=otherAnswerText]", this.form).prop("disabled", false);
                }
            }
        },
        loadForm: function() {
            var qId = parseInt($("input[name=questionId]", this.form).val(), 10), answers = OnBoarding.getAnswerByQID(qId), answersId = [], self = this;
            if (answers) {
                answersId = _.uniq(_.flatten(answers, "answerId"));
                $.each(answersId, function(index, answer) {
                    if (self.checkCount < self.maxSelections) {
                        var checkbox = $("input[value=" + answer + "]", self.form);
                        checkbox.prop("checked", true);
                        checkbox.parent("label.check-selector").addClass("checked");
                        self.checkCount++;
                        debug("LOADED FORM", answers[index]);
                    }
                });
            }
            this.toggleSelections();
        },
        saveForm: function() {
            var qId = parseInt($("input[name=questionId]", this.form).val(), 10), answers = $("input[name=answers]:checked", this.form), otherAnswer = {
                id: $("input[name=otherAnswerId]", this.form).val(),
                text: $("textarea[name=otherAnswerText]", this.form).val(),
                isDefault: false
            }, totalAnswersCount = answers.length, data = {
                questions: []
            }, dataQuestion = {
                questionId: qId,
                answers: []
            }, sendData = true, error;
            if (otherAnswer.id !== "" && otherAnswer.text !== "") {
                totalAnswersCount++;
            }
            if (totalAnswersCount !== 0 && totalAnswersCount <= this.maxSelections) {
                if (answers.length === 0 && otherAnswer.id && otherAnswer.text !== "") {
                    dataQuestion.answers.push({
                        answerId: otherAnswer.id,
                        answerText: otherAnswer.text,
                        isSelected: true
                    });
                } else if (answers.length === 1) {
                    dataQuestion.answers.push({
                        answerId: answers.val(),
                        isSelected: true
                    });
                } else if (answers.length > 1) {
                    $.each(answers, function(index, answer) {
                        dataQuestion.answers.push({
                            answerId: $(answer).val(),
                            isSelected: true
                        });
                    });
                    if (!otherAnswer.isDefault && otherAnswer.id) {
                        dataQuestion.answers.push({
                            answerId: otherAnswer.id,
                            answerText: otherAnswer.text,
                            isSelected: true
                        });
                    }
                } else {
                    sendData = false;
                    error = "You need to select at least one option.";
                    OnBoarding.dispayError(error);
                    debug("VALIDATION ERROR", totalAnswersCount, this.maxSelections);
                }
                if (sendData) {
                    data.questions.push(dataQuestion);
                    $("form .is-error").addClass("hidden");
                    OnBoarding.updateAnswers(data, OnBoarding.redirect);
                }
            } else if (totalAnswersCount === 0) {
                error = "You need to select at least one option.";
                OnBoarding.dispayError(error);
                debug("VALIDATION ERROR", totalAnswersCount, this.maxSelections);
            } else {
                error = this.maxSelections === 1 ? "option" : "options";
                error = "You can't select more than " + this.maxSelections + " " + error + ".";
                OnBoarding.dispayError(error);
                debug("VALIDATION ERROR", totalAnswersCount, this.maxSelections);
            }
        },
        init: function() {
            this.form = $("form");
            this.maxSelections = parseInt($("input[name=maxSelections]", this.form).val(), 10);
            this.checkCount = 0;
            this.loadForm();
            this.bind();
        }
    };
    OnBoarding.Q4 = OnBoarding.Q3;
    OnBoarding.Q5 = {
        bind: function() {
            debug("[onboarding] binding Q5 events");
            var that = this;
            this.form.on("submit", function(e) {
                e.preventDefault();
                that.saveForm();
                window.track("regOnboardSubmit");
                debug("[regOnboardSubmit] regOnboardSubmit event");
            });
            $(document).find(".highlight").on("click", function() {
                window.track("regOnboardCancel");
                debug("[regOnboardCancel] regOnboardCancel event");
            });
            $(document).find("#onboard-skipQuestion").on("click", function() {
                window.track("regOnboardSkip");
                debug("[regOnboardSkip] regOnboardSkip event");
            });
        },
        loadForm: function() {
            this.form.find("fieldset").each(function() {
                if ($(this).find('input[type="radio"]').length === 0) {
                    return;
                }
                var qId = $(this).find('input[type="radio"]').attr("name").match(/\d$/)[0];
                var answers = OnBoarding.getAnswerByQID(qId);
                if (answers) {
                    answers.forEach(function(answer) {
                        $("input[value=" + answer.answerId + "]").prop("checked", answer.isSelected).trigger("change");
                    });
                }
            });
        },
        saveForm: function() {
            var data = {
                questions: []
            }, submit = true, error;
            this.form.find("fieldset").each(function() {
                if ($(this).find('input[type="radio"]').length === 0) {
                    return;
                }
                var answers = [];
                $(this).find('input[type="radio"]:checked').each(function() {
                    answers.push({
                        answerId: $(this).val(),
                        isSelected: $(this).is(":checked")
                    });
                });
                data.questions.push({
                    questionId: $(this).find('input[type="radio"]').attr("name").match(/\d$/)[0],
                    answers: answers
                });
                if (answers.length === 0) {
                    submit = false;
                }
            });
            if (submit) {
                OnBoarding.updateAnswers(data, OnBoarding.redirect);
            } else {
                error = "You need to answer all the questions.";
                OnBoarding.dispayError(error);
            }
        },
        init: function() {
            this.form = $("form");
            this.bind();
            this.loadForm();
        }
    };
    OnBoarding.Q6 = {
        init: function() {
            $(document).find(".highlight").on("click", function() {
                window.track("regOnboardCancel");
                debug("[regOnboardCancel] regOnboardCancel event");
            });
        }
    };
    OnBoarding.updateAnswers = function(data, callback, singleAnswer) {
        var endPoint;
        if (singleAnswer) {
            endPoint = APIEndpoint + "/personalization/onboarding/questions/me/updateanswer";
        } else {
            endPoint = APIEndpoint + "/personalization/onboarding/questions/me/update";
        }
        debug("SENDING DATA", data);
        var $input = $("form").find('input[type="submit"]');
        $input.data("old-copy", $input.val());
        $input.val("Loading...").attr("disabled", true);
        $.ajax({
            url: endPoint,
            contentType: "application/json",
            data: JSON.stringify(data),
            type: "POST",
            xhrFields: {
                withCredentials: true
            }
        }).done(function(response) {
            debug("ONBOARDING RESPONSE", response);
            callback();
        }).fail(function() {
            debug("Server Error");
            var $input = $("form").find('input[type="submit"]');
            $input.val($input.data("old-copy")).attr("disabled", false);
        });
    };
    OnBoarding.getAnswerByQID = function(aID) {
        var response = false;
        if (OnBoarding.data) {
            $.each(OnBoarding.data, function(index, question) {
                if (question.questionId === aID) {
                    response = question.answers;
                }
            });
        }
        return response;
    };
    OnBoarding.dispayError = function(error) {
        var errorEl = $("form .is-error");
        errorEl.text(error).removeClass("hidden");
        $("html, body").animate({
            scrollTop: errorEl.offset().top - 150
        }, 500);
    };
    OnBoarding.redirect = function() {
        var url = $("form input[name=nextPage]").val();
        if (url) {
            window.location = url;
        }
    };
    OnBoarding.start = function(guid) {
        debug("[OnBoarding] guid", guid);
        if (window.EQ.Helpers.readCookie("from_ios") === "true") {
            window.EQ.Helpers.tryFastAppSwitch();
        }
    };
    OnBoarding.init = function(step) {
        debug("[OnBoarding] Init at step", step);
        $container.addClass("full-bleed onboarding");
        $.ajax({
            url: APIEndpoint + "/personalization/onboarding/questions/me",
            contentType: "application/json",
            data: {
                questionTypes: "OnBoarding"
            },
            type: "GET",
            xhrFields: {
                withCredentials: true
            }
        }).done(function(answers) {
            debug("ONBOARDING RESPONSE", answers);
            OnBoarding.data = answers.answeredQuestions;
            if (step && OnBoarding["Q" + step]) {
                OnBoarding["Q" + step].init();
            }
            if (step === "start") {
                $(document).find("#onboard-startBtn").on("click", function() {
                    window.track("regOnboardSubmit");
                });
                $(document).find(".highlight").on("click", function() {
                    window.track("regOnboardCancel");
                });
            }
        }).fail(function() {
            debug("Server Error");
        });
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var Password = App.Pages.Password = {}, $forgotPasswordForm = $(".recover-password"), $resetPasswordForm = $(".reset-password");
    Password.Forgot = {};
    Password.Reset = {};
    Password.Forgot.init = function() {
        debug("[forgotPassword] Init");
        Password.Forgot.bind();
    };
    Password.Forgot.bind = function() {
        var that = Password.Forgot;
        $forgotPasswordForm.on("submit", function(e) {
            e.preventDefault();
            that.validateAndSubmit();
        });
    };
    Password.Forgot.validateAndSubmit = function() {
        if ($forgotPasswordForm.data("publicMethods").isValid()) {
            $forgotPasswordForm.data("publicMethods").sendAjaxRequest({
                email: "RecoverPassword.UserName"
            }, function() {
                var $confirmationBox = $(".password-recover-confirmation"), mail = $forgotPasswordForm.data("publicMethods").getData()["RecoverPassword.UserName"];
                $confirmationBox.removeClass("hidden");
                debug("[regForgotPWEmlSent] Success fully retrived");
                window.track("regForgotPWEmlSent");
                $confirmationBox.find(".user-email").text(mail);
                $forgotPasswordForm.add(".lost-credentials").add(".tpl-subtitleparagraphcallout.dtm-password-subtitleparagraphcallout").addClass("hidden");
                $("body, html").animate({
                    scrollTop: 0
                });
            });
        }
    };
    Password.Reset.init = function() {
        debug("[resetPassword] Init");
        Password.Reset.bind();
    };
    Password.Reset.bind = function() {
        var that = Password.Reset;
        $resetPasswordForm.on("submit", function(e) {
            e.preventDefault();
            that.validateAndSubmit();
            debug("[validateAndSubmit] called");
        });
    };
    Password.Reset.validateAndSubmit = function() {
        if ($resetPasswordForm.data("publicMethods").isValid()) {
            $resetPasswordForm.data("publicMethods").sendAjaxRequest({
                url: "ResetPassword.url",
                lastName: "ResetPassword.LastName",
                password: "ResetPassword.NewPassword"
            }, function() {
                global.location.href = "/";
            });
        }
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var Rewards = App.Pages.Rewards = {}, TempResponce;
    Rewards.$view = {
        details: $("#rewardDetails"),
        history: $("#rewardHistory")
    };
    Rewards.printGiftCard = function($el) {
        debug("[Rewards] print gift card", $el);
        window.open(APIEndpoint + $el.data("url"));
    };
    Rewards.activateGiftCard = function($el) {
        debug("[Rewards] activate Gift Card", $el);
        if ($el.data("is-clicked")) {
            return;
        }
        $el.data("is-clicked", true);
        var options = {
            url: $el.data("url"),
            method: $el.data("method"),
            data: {
                id: $el.data("id")
            },
            el: $el,
            title: $el.html(),
            callback: function() {
                Rewards.reloadPage();
                if (TempResponce) {
                    window.open(APIEndpoint + "/me/rewards/giftcard/print?gcNumber=" + TempResponce.encryptGiftCardNumber, "_blank");
                    window.focus();
                }
            }
        };
        $el.html("Processing please wait...");
        this.ajaxManager(options);
    };
    Rewards.withdrawPass = function($el) {
        debug("[Rewards] withdraw pass", $el);
        var options = {
            url: $el.data("url"),
            method: $el.data("method"),
            data: {
                id: $el.data("id")
            },
            callback: function() {
                Rewards.reloadPage();
            }
        };
        this.ajaxManager(options);
    };
    Rewards.ajaxManager = function(options) {
        options = options || {};
        $.ajax(this.ENDPOINT + options.url, {
            data: JSON.stringify(options.data),
            contentType: "application/json",
            type: options.method,
            xhrFields: {
                withCredentials: true
            },
            crossDomain: true
        }).done(function(response) {
            TempResponce = response;
            options.callback(response);
        }).fail(function(jqXHR, textStatus, errorThrown) {
            options.el.html(options.title);
            debug("[Rewards] Error", jqXHR, textStatus, errorThrown);
            Rewards.error(jqXHR, textStatus, errorThrown);
        });
    };
    Rewards.error = function(jqXHR, textStatus, errorThrown) {
        debug("[Rewards] error", jqXHR, textStatus, errorThrown);
        var response = JSON.parse(jqXHR.responseText);
        console.log("message", response);
        Rewards.$view.details.html('<h2 class="title paragraph">' + response.error.message + "</h2>");
    };
    Rewards.reloadPage = function() {
        location.reload(true);
    };
    Rewards.bind = function() {
        this.$view.details.on("click", ".print", function(e) {
            e.preventDefault();
            Rewards.printGiftCard($(e.currentTarget));
        });
        this.$view.details.on("click", ".activate", function(e) {
            e.preventDefault();
            Rewards.activateGiftCard($(e.currentTarget));
        });
        this.$view.history.on("click", ".withdraw", function(e) {
            e.preventDefault();
            Rewards.withdrawPass($(e.currentTarget));
        });
    };
    Rewards.init = function() {
        Rewards.ENDPOINT = APIEndpoint;
        Rewards.bind();
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var ScheduleEquifit = App.Pages.ScheduleEquifit = {}, $container = $(".page"), self;
    ScheduleEquifit.Form = {
        bind: function() {
            debug("[ScheduleEquifit] binding events");
            var that = this;
            $('#ContactOptions option[value="Twitter"]').remove();
            this.form.on("submit", function(e) {
                e.preventDefault();
                that.saveForm();
                window.track("regScheduleEquifitSubmit");
                debug("[regScheduleEquifitSubmit] regScheduleEquifitSubmit event");
            });
            $(document).find(".highlight").on("click", function() {
                window.track("regScheduleEquifitCancel");
                debug("[regScheduleEquifitCancel] regScheduleEquifitCancel event");
            });
            $(".question #anytime", this.form).on("change", function() {
                var dateTimeCheckbox = $(".question .datetime-select", this.form);
                if ($(this).is(":checked")) {
                    dateTimeCheckbox.addClass("hidden");
                } else {
                    dateTimeCheckbox.removeClass("hidden");
                }
            });
        },
        saveForm: function() {
            var phoneNumber = $("input[type=tel]", this.form), email = $("input[type=email]", this.form), Validators = {
                email: function(value) {
                    return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(value);
                },
                usPhoneNumber: function(value) {
                    return /[01]?[- .]?(\([2-9]\d{2}\)|[2-9]\d{2})[- .]?\d{3}[- .]?\d{4}/.test(value);
                },
                ukPhoneNumber: function(value) {
                    return /\(?(?:(?:0(?:0|11)\)?[\s-]?\(?|\+)44\)?[\s-]?\(?(?:0\)?[\s-]?\(?)?|0)(?:\d{2}\)?[\s-]?\d{4}[\s-]?\d{4}|\d{3}\)?[\s-]?\d{3}[\s-]?\d{3,4}|\d{4}\)?[\s-]?(?:\d{5}|\d{3}[\s-]?\d{3})|\d{5}\)?[\s-]?\d{4,5}|8(?:00[\s-]?11[\s-]?11|45[\s-]?46[\s-]?4\d))(?:(?:[\s-]?(?:x|ext\.?\s?|\#)\d+)?)/.test(value);
                }
            }, error = "";
            var isPhoneNumber = window.user.SourceSystem === 1 || window.user.SourceSystem === 5 ? Validators.usPhoneNumber(phoneNumber.val()) : Validators.ukPhoneNumber(phoneNumber.val());
            if (email.length > 0) {
                if (email.val() === "" || !Validators.email(email.val())) {
                    email.addClass("error");
                    error = "Please check your email.";
                } else {
                    email.removeClass("error");
                }
            } else if (phoneNumber.length > 0) {
                if (phoneNumber.val() === "" || !isPhoneNumber) {
                    phoneNumber.addClass("error");
                    error = "Please check your Phone number.";
                } else {
                    phoneNumber.removeClass("error");
                }
            }
            if (this.form.find(".error").length > 0) {
                ScheduleEquifit.dispayError(error);
                return;
            }
            $("form .is-error").addClass("hidden");
            var data = {
                facilityId: $(".club select option:selected", this.form).data("facility-id"),
                email: email.length > 0 ? email.val() : "",
                phoneNumber: phoneNumber.length > 0 ? phoneNumber.val() : "",
                comments: $("textarea[id=message]", this.form).val(),
                isAnytime: false,
                preferredDay: "",
                preferredTime: "",
                refreshCache: true
            };
            var anytime = $("input[id=anytime]", this.form).prop("checked");
            if (anytime) {
                data.isAnytime = true;
            } else {
                data.preferredDay = $("select[id=DayOptions]", this.form).val();
                data.preferredTime = $("select[id=TimeOptions]", this.form).val();
            }
            var $input = $("form").find('input[type="submit"]');
            $input.val("Loading...").attr("disabled", true);
            var endPoint = APIEndpoint + "/personal-training/schedule-equifit-assessment";
            $.ajax({
                url: endPoint,
                contentType: "application/json",
                data: JSON.stringify(data),
                type: "POST",
                xhrFields: {
                    withCredentials: true
                }
            }).done(function(response) {
                debug("ScheduleEquifit RESPONSE", response);
                self.form.hide();
                self.$thankContainer.removeClass("hidden");
                $("html, body").animate({
                    scrollTop: self.$thankContainer.offset().top - 150
                }, 500);
            }).fail(function() {
                debug("Server Error");
                self.form.hide();
                self.$errorContainer.removeClass("hidden");
                $("html, body").animate({
                    scrollTop: self.$errorContainer.offset().top - 150
                }, 500);
            });
        },
        init: function() {
            self = this;
            this.form = $("form.join-schedule-form");
            this.$thankContainer = $(".schedule-equifit-thanks");
            this.$errorContainer = $(".schedule-equifit-error");
            this.bind();
        }
    };
    ScheduleEquifit.dispayError = function(error) {
        var errorEl = $("form .is-error");
        errorEl.text(error).removeClass("hidden");
        $("html, body").animate({
            scrollTop: errorEl.offset().top - 150
        }, 500);
    };
    ScheduleEquifit.init = function() {
        debug("[ScheduleEquifit] Init");
        $container.addClass("full-bleed schedule-equifit");
        ScheduleEquifit.Form.init();
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var SignIn = App.Pages.SignIn = {}, $userInformation = $(".tpl-memberimagetextcallout div").data("template-data"), $eqxSignInButton = $(".eq-sign-in"), $signupfacebookwithoutemailForm = $(".signup-facebook-withoutemail");
    SignIn.FacebookWithOutEmail = {};
    SignIn.init = function() {
        debug("[SignIn] Init");
        console.log($userInformation);
        SignIn.bind();
    };
    SignIn.bind = function() {
        var that = SignIn;
        this.fbLogin.bind();
        $eqxSignInButton.on("click", function(e) {
            e.preventDefault();
            that.submit();
        });
    };
    SignIn.fbLogin = {
        bind: function() {
            $(".fb-login").on("click", SignIn.fbLogin.intent.bind(SignIn.fbLogin));
        },
        intent: function() {
            window.track("regSignupWithFB");
            this.getToken(function(token) {
                debug("FBT:", token);
                var userInfo = {
                    barcodeId: $userInformation.BarcodeId,
                    fbAccessToken: token,
                    sourceSystem: $userInformation.SourceSystem,
                    lastName: $userInformation.LastName,
                    firstName: $userInformation.FirstName
                };
                $.ajax(APIEndpoint + "/registration/signupwithfacebook", {
                    data: JSON.stringify(userInfo),
                    contentType: "application/json",
                    type: "POST",
                    xhrFields: {
                        withCredentials: true
                    }
                }).done(function() {
                    debug("[FB SignUP] Success");
                    $.ajax(APIEndpoint + "/authentication/fblogin", {
                        data: {
                            accessToken: userInfo.fbAccessToken
                        },
                        type: "POST",
                        xhrFields: {
                            withCredentials: true
                        }
                    }).done(function() {
                        debug("[FBLogin] Success");
                        var date = new Date();
                        date.setTime(date.getTime() + 20 * 60 * 1e3);
                        $.cookie("isMemberRegisteredFB", "true", {
                            expires: date,
                            path: "/"
                        });
                        global.location.href = "/";
                    }).fail(function(jqXHR) {
                        var errorText = jqXHR.responseJSON && jqXHR.responseJSON.message;
                        debug("[FBLogin] Failed", errorText);
                        if (errorText) {
                            $(".is-error").removeClass("hidden").text(errorText);
                        }
                    });
                }).fail(function(jqXHR) {
                    if (jqXHR.responseJSON.messageId === 40021) {
                        return SignIn.redirectToFacebookWithSigninEmail(userInfo);
                    }
                    var errorText = jqXHR.responseJSON && jqXHR.responseJSON.message;
                    debug("[FBLogin] Failed", errorText);
                    if (errorText) {
                        $(".is-error").removeClass("hidden").text(errorText);
                    }
                });
            });
        },
        getToken: function(cb) {
            FB.login(function(response) {
                if (response.status === "connected") {
                    cb(response.authResponse.accessToken);
                }
            }, {
                scope: "email,user_likes,user_friends"
            });
        }
    };
    SignIn.submit = function() {
        var $form = $("<form></form>");
        $form.attr("action", "/activate/signin/equinox").attr("method", "POST");
        var $country = $('<input type="hidden"/>').attr("name", "LastName").val($userInformation.LastName);
        var $lastName = $('<input type="hidden"/>').attr("name", "Country").val($userInformation.SourceSystem);
        var $barcode = $('<input type="hidden"/>').attr("name", "Barcode").val($userInformation.BarcodeId);
        $form.append($country);
        $form.append($lastName);
        $form.append($barcode);
        $("body").append($form);
        $form.submit();
    };
    SignIn.redirectToFacebookWithSigninEmail = function(data) {
        var $form = $("<form></form>");
        $form.attr("action", "/activate/signin/facebook/email").attr("method", "POST");
        var $country = $('<input type="hidden"/>').attr("name", "LastName").val(data.lastName);
        var $firstName = $('<input type="hidden"/>').attr("name", "FirstName").val(data.firstName);
        var $lastName = $('<input type="hidden"/>').attr("name", "Country").val(data.sourceSystem);
        var $barcode = $('<input type="hidden"/>').attr("name", "Barcode").val(data.barcodeId);
        var $fbAccessToken = $('<input type="hidden"/>').attr("name", "FbToken").val(data.fbAccessToken);
        $form.append($country);
        $form.append($lastName);
        $form.append($firstName);
        $form.append($barcode);
        $form.append($fbAccessToken);
        $("body").append($form);
        $form.submit();
    };
    SignIn.FacebookWithOutEmail.init = function() {
        debug("[FacebookWithOutEmail] Init");
        SignIn.FacebookWithOutEmail.bind();
    };
    SignIn.FacebookWithOutEmail.bind = function() {
        var that = SignIn.FacebookWithOutEmail;
        $signupfacebookwithoutemailForm.on("submit", function(e) {
            e.preventDefault();
            that.validateAndSubmit();
        });
    };
    SignIn.FacebookWithOutEmail.validateAndSubmit = function() {
        if ($signupfacebookwithoutemailForm.data("publicMethods").isValid()) {
            $signupfacebookwithoutemailForm.data("publicMethods").sendAjaxRequest({
                sourceSystem: "country",
                barcodeId: "barcode",
                lastName: "lastName",
                FacebookAccessToken: "fbAccessToken",
                email: "EmailForm.EmailLabel"
            }, function() {
                var $confirmationBox = $(".facebook-confirmation"), mail = $signupfacebookwithoutemailForm.data("publicMethods").getData()["EmailForm.EmailLabel"];
                $confirmationBox.removeClass("hidden");
                $confirmationBox.find(".user-email").text(mail);
                $signupfacebookwithoutemailForm.add(".lost-credentials").add(".tpl-subtitleparagraphcallout.dtm-password-subtitleparagraphcallout").addClass("hidden");
                $("body, html").animate({
                    scrollTop: 0
                });
            });
        }
    };
})(window, window.App);

(function(global, App) {
    "use strict";
    var User = App.Pages.User = {}, $forgotUserForm = $(".recover-username"), $changeusernameForm = $(".change-username"), $verifyUserNameForm = $(".verify-username"), $spaMemberUpgrade = $(".spa-member-upgrade");
    User.Forgot = {};
    User.ChangeUserName = {};
    User.VerifyUserName = {};
    User.SpaMemberUpgrade = {};
    User.Forgot.debug = function() {
        debug("[forgotUser] Init");
        User.Forgot.bind();
    };
    User.Forgot.bind = function() {
        var that = User.Forgot;
        $forgotUserForm.on("submit", function(e) {
            e.preventDefault();
            that.validateAndSubmit();
        });
    };
    User.Forgot.validateAndSubmit = function() {
        if ($forgotUserForm.data("publicMethods").isValid()) {
            $forgotUserForm.data("publicMethods").sendAjaxRequest({
                country: "country",
                barcode: "RecoverUserName.Barcode",
                lastName: "RecoverUserName.LastName"
            }, function(data) {
                debug("[forgotUser] Callback");
                $(".user-recover-confirmation").removeClass("hidden");
                window.track("regForgotUsername");
                debug("[regForgotUsername] tracking event for regForgotUsername");
                $(".confirmation-message-module").data("templateData", {
                    firstName: data.firstName,
                    email: data.email
                }).data("publicMethods").render();
                $forgotUserForm.add(".tpl-subtitleparagraphcallout.dtm-user-subtitleparagraphcallout").add(".lost-credentials").addClass("hidden");
                $("body, html").animate({
                    scrollTop: 0
                });
            });
        }
    };
    User.ChangeUserName.init = function() {
        debug("[changeUserName] Init");
        User.ChangeUserName.bind();
    };
    User.ChangeUserName.bind = function() {
        var that = User.ChangeUserName;
        $changeusernameForm.on("submit", function(e) {
            e.preventDefault();
            that.validateAndSubmit();
        });
    };
    User.ChangeUserName.validateAndSubmit = function() {
        if ($changeusernameForm.data("publicMethods").isValid()) {
            $changeusernameForm.data("publicMethods").sendAjaxRequest({
                email: "LoginWithEmailForm.EmailLabel",
                password: "password",
                username: "username"
            }, function() {
                var $confirmationBox = $(".change-username-confirmation"), mail = $changeusernameForm.data("publicMethods").getData()["LoginWithEmailForm.EmailLabel"];
                $confirmationBox.removeClass("hidden");
                $confirmationBox.find(".user-email").text(mail);
                $changeusernameForm.add(".tpl-subtitleparagraphcallout.dtm-password-subtitleparagraphcallout").addClass("hidden");
                $("body, html").animate({
                    scrollTop: 0
                });
            });
        }
    };
    User.VerifyUserName.init = function() {
        debug("[verifyUserName] Init");
        User.VerifyUserName.bind();
    };
    User.VerifyUserName.bind = function() {
        var that = User.VerifyUserName;
        $verifyUserNameForm.on("submit", function(e) {
            e.preventDefault();
            that.validateAndSubmit();
        });
    };
    User.VerifyUserName.validateAndSubmit = function() {
        if ($verifyUserNameForm.data("publicMethods").isValid()) {
            $verifyUserNameForm.data("publicMethods").sendAjaxRequest({
                url: "SumbitEmailModel.Token",
                password: "SumbitEmailModel.Password"
            }, function() {
                if (window.EQ.Helpers.readCookie("from_ios") === "true") {
                    window.EQ.Helpers.tryFastAppSwitch();
                }
                EQ.Helpers.refreshUserCacheData(function() {
                    global.location.href = decodeURIComponent(EQ.Helpers.getQueryStringVariable("ReturnUrl") || "/");
                });
            });
        }
    };
    User.SpaMemberUpgrade.init = function() {
        debug("[SpaMemberUpgrade] Init");
        User.SpaMemberUpgrade.bind();
    };
    User.SpaMemberUpgrade.bind = function() {
        var that = User.SpaMemberUpgrade;
        $spaMemberUpgrade.on("submit", function(e) {
            e.preventDefault();
            that.validateAndSubmit();
        });
    };
    User.SpaMemberUpgrade.validateAndSubmit = function() {
        if ($spaMemberUpgrade.data("publicMethods").isValid()) {
            $spaMemberUpgrade.data("publicMethods").sendAjaxRequest({
                userId: "userId",
                country: "country",
                barcode: "SpaForm.BarcodeLabel",
                lastName: "SpaForm.LastNameLabel"
            }, function() {
                global.location.href = decodeURIComponent(EQ.Helpers.getQueryStringVariable("ReturnUrl") || "/");
            });
        }
    };
})(window, window.App);

(function(App) {
    "use strict";
    App.Pages.WorkoutSummaryShared = {
        init: function(shareID) {
            $(".rank-num sup").text(function() {
                return EQ.Helpers.ordinate(parseInt($(this).parent().text(), 10)).ord;
            });
            if (user !== null) {
                $(".member").removeClass("hidden");
            } else {
                $(".non-member").removeClass("hidden");
                if (user.ShareId === shareID) {
                    $(".g-pronoun").text("You");
                }
            }
        }
    };
})(window.App);

(function(App) {
    "use strict";
    var WorkoutSummary = App.Pages.WorkoutSummary = {}, $page = $("section.page.class-summary"), $intensityContainer = $(".intensity-level-container"), $intensityMeasure = $(".intensity .measure"), $intensityRadioBtns = $intensityContainer.find("input"), $intensityLevel = $intensityContainer.find(".intensity-level"), $caloriesContainer = $(".calories-value-container"), $caloriesMeasure = $(".calories .measure"), $caloriesNumInput = $caloriesContainer.find("input"), $editButton = $(".edit-button"), $hiddenIntensity = $intensityContainer.parent(".inactive"), $duration = $(".duration"), $errorArea = $(".error-area"), $turnACCE = $(".turn-acce"), $overlayBox = $(".overlay-box"), $editAll, summaryData, acceOn = $page.data("hasacce") === "True", isCustom = $page.data("custom") === "True", isOcr = $page.data("ocr") === "True", optedOut = $page.data("optedout") === "True", workoutDate = $page.data("workoutdate"), workoutID, classInstanceID, categoryID, subcategoryID, errorHandler, originalUserSetCaloriesValue = $(".cycling-acce .calories .measure").text(), hasData = false;
    WorkoutSummary.init = function(id) {
        var rawModel = $(".raw-model").html();
        summaryData = JSON.parse(rawModel.substr(0, rawModel.length - 1));
        debug("Summary Data", summaryData);
        workoutID = id;
        classInstanceID = summaryData.WorkoutEvent.ClassInstanceId;
        categoryID = summaryData.WorkoutEvent.CategoryId;
        subcategoryID = summaryData.WorkoutEvent.SubCategoryId;
        $(".time-location").text(function(i, text) {
            if ($(this).data("facilityid")) {
                var facility = EQ.Helpers.getFacilityById($(this).data("facilityid"));
                if (facility !== null) {
                    text = text + ", " + facility.ClubName;
                }
            }
            return text;
        });
        errorHandler = EQ.Helpers.loaderAndErrorHandler($errorArea, {
            color: "black"
        });
        var $caloriesOverlay = $("<div></div>"), infoSaved = false;
        $page.append($caloriesOverlay);
        App.loadComponent("automatic-calories-overlay", $caloriesOverlay);
        Backbone.Events.on("automatic-calories-overlay:save-info", function() {
            infoSaved = true;
        });
        Backbone.Events.on("automatic-calories-overlay:close", function() {
            if (infoSaved) {
                location.reload();
            }
        });
        $caloriesNumInput.on("keydown", WorkoutSummary.validate).on("keyup", WorkoutSummary.updateValue);
        $intensityRadioBtns.on("click", WorkoutSummary.radioButtonHighlight).on("click", WorkoutSummary.updateCaloriesText);
        $turnACCE.on("click", WorkoutSummary.switchACCE);
        $(".icon-left-arrow").on("click", WorkoutSummary.backButton);
        $(".remove-class").on("click", WorkoutSummary.removeClass);
        if (categoryID === 6 && !isCustom && !isOcr) {
            $editAll = $editButton.add($caloriesContainer).add($caloriesMeasure);
            $editButton.on("click", WorkoutSummary.editCycling);
            errorHandler.showLoader();
            WorkoutSummary.loadCyclingStats().done(function() {
                errorHandler.hideLoader();
                debug("<------  HAS DATA  ------>", hasData);
                if (hasData) {
                    $caloriesMeasure = $(".calories:first .measure");
                    $(".cycling-acce").remove();
                    $(".notes-container").remove();
                    $turnACCE.remove();
                    $(".editable-info-container").removeClass("hidden");
                    $(".class-rank-container").removeClass("hidden");
                } else {
                    $(".five-items").remove();
                    $(".cycling-acce").removeClass("hidden");
                    $(".notes-container").removeClass("hidden");
                    $turnACCE.removeClass("hidden");
                    $caloriesNumInput = $(".calories-value-container input");
                    WorkoutSummary.acceClassBehavior();
                }
                $caloriesMeasure = $(".calories .measure");
            }).fail(function() {
                errorHandler.showError();
            });
        } else {
            WorkoutSummary.acceClassBehavior();
        }
    };
    WorkoutSummary.acceClassBehavior = function() {
        if (acceOn) {
            $intensityRadioBtns.on("click", WorkoutSummary.updateCalories);
            if (localStorage.getItem("acce-" + workoutID) === null && $intensityMeasure.text() !== "-") {
                WorkoutSummary.showMessage("acce", 4e3);
                localStorage.setItem("acce-" + workoutID, "true");
            }
        }
        $editAll = $intensityContainer.add($caloriesContainer).add($intensityMeasure).add($caloriesMeasure).add($editButton);
        $editButton.off().on("click", WorkoutSummary.edit);
    };
    WorkoutSummary.loadCyclingStats = function() {
        var defer = $.Deferred();
        var endpoint = {
            CLASS_STATS: "/v3/classes/" + classInstanceID + "/me/statistics",
            UNITS: "/v2.6/me/profile/unitofmeasure"
        };
        var xhrStats = EQ.Helpers.getService(endpoint.CLASS_STATS);
        var xhrUnits = EQ.Helpers.getService(endpoint.UNITS);
        EQ.Helpers.when(xhrStats, xhrUnits).done(function(data) {
            WorkoutSummary.userStatsView(data[0], data[1].unitOfMeasure);
            if (!optedOut) {
                WorkoutSummary.userRankView(data[0], userProfileJson.Gender);
            }
            defer.resolve();
        }).fail(function() {
            defer.reject();
        });
        return defer;
    };
    WorkoutSummary.userRankView = function(stats, gender) {
        gender = gender ? gender : "female";
        var $rank = $(".rank-result"), $firstrank = $rank.siblings(".first-position");
        if (stats.rank !== 0) {
            var ranknum = EQ.Helpers.ordinate(stats.rank);
            if (ranknum.num === "1") {
                $rank.addClass("hidden");
                $firstrank.removeClass("hidden");
                $firstrank.find("." + gender.toLowerCase()).removeClass("hidden");
                $rank = $firstrank;
            }
            $rank.find(".rank-num").html(ranknum.num + "<sup>" + ranknum.ord + "</sup>");
            $rank.find(".rank-total").text(stats.userCount);
            $rank.find(".rank-gender").text(function() {
                return $(this).text().replace("[men/women]", gender.toLowerCase() === "female" ? "women" : "men");
            });
        } else {
            $rank.hide();
        }
    };
    WorkoutSummary.userStatsView = function(stats, unitofmeasure) {
        var $editableInfoItems = $(".editable-info-container").children().find(".measure"), distancevalue = "-", thevalue = "-";
        if (stats.metrics.length > 0) {
            _.each(stats.metrics, function(metric) {
                var $item = $editableInfoItems.filter("[data-type=" + metric.name + "]");
                thevalue = "-";
                if (metric.value) {
                    if (metric.metric === "Power" || metric.metric === "Calories" || metric.metric === "Energy") {
                        thevalue = parseInt(metric.value, 10) + EQ.Helpers.shortUnit(metric.metric);
                        if (metric.metric === "Calories" && originalUserSetCaloriesValue && originalUserSetCaloriesValue !== "-") {
                            thevalue = parseInt(originalUserSetCaloriesValue, 10) + EQ.Helpers.shortUnit(metric.metric);
                        }
                    } else {
                        if (metric.metric === "Distance") {
                            distancevalue = EQ.Helpers.numbers.trimDecimals(metric.value) + " " + EQ.Helpers.longUnit(metric.metric + unitofmeasure);
                            thevalue = EQ.Helpers.numbers.trimDecimals(metric.value) + EQ.Helpers.shortUnit(metric.metric + unitofmeasure);
                        } else {
                            thevalue = EQ.Helpers.numbers.trimDecimals(metric.value) + EQ.Helpers.shortUnit(metric.metric + unitofmeasure);
                        }
                    }
                    hasData = true;
                }
                $item.text(thevalue);
            });
        }
        WorkoutSummary.SharingComponent(distancevalue);
    };
    WorkoutSummary.SharingComponent = function(distance) {
        var linkUrl = "/activity/" + userProfileJson.ShareId + "/classes/" + classInstanceID, title, picUrl, twCopy;
        switch (parseInt(subcategoryID, 10)) {
          case 1:
            title = summaryData.ClassSummary.OgTitle;
            twCopy = "I just rode " + distance + " in an Equinox Cycling Class. " + linkUrl + " #EQSTUDIOCYCLING";
            picUrl = !summaryData.ClassSummary.OgImageUrl ? location.origin + "/assets/images/sharing/fb_bab.png" : summaryData.ClassSummary.OgImageUrl;
            break;

          case 2:
            title = "The Pursuit: Build";
            twCopy = "I just went on the ultimate power trip in this new cycling class. It’s one wild ride. #EQXpursuit " + linkUrl;
            picUrl = !summaryData.ClassSummary.OgImageUrl ? location.origin + "/assets/images/activity/sharing/EQ_FacebookPost_Build_1200x630.png" : summaryData.ClassSummary.OgImageUrl;
            break;

          case 3:
            title = "The Pursuit: Burn";
            twCopy = "I just set the bike on fire in this new cycling class. It’s one wild ride. #EQXpursuit " + linkUrl;
            picUrl = !summaryData.ClassSummary.OgImageUrl ? location.origin + "/assets/images/activity/sharing/EQ_FacebookPost_Burn_1200x630.png" : summaryData.ClassSummary.OgImageUrl;
            break;

          default:
            title = summaryData.ClassSummary.OgTitle;
            twCopy = "Twitter Share";
            picUrl = !summaryData.ClassSummary.OgImageUrl ? location.origin + "/assets/images/sharing/fb_bab.png" : summaryData.ClassSummary.OgImageUrl;
            break;
        }
        App.loadComponent("share", $(".social-icons"), {
            type: "share-summary",
            fbMode: "share-summary",
            distance: distance,
            linkurl: linkUrl,
            picture: picUrl,
            name: title,
            twCopy: twCopy
        });
    };
    WorkoutSummary.editCycling = function(e) {
        e.preventDefault();
        var d = new $.Deferred(), intensityLevel = "medium", caloriesInput = $caloriesNumInput.val();
        errorHandler.hideError();
        if ($(this).hasClass("save") && (caloriesInput !== "" && caloriesInput !== $caloriesMeasure.text())) {
            d = WorkoutSummary.save(caloriesInput, intensityLevel);
        } else {
            if (!caloriesInput.length) {
                $caloriesNumInput.val(parseInt($caloriesMeasure.text(), 10) || "");
            }
            d.resolve();
        }
        d.always(function() {
            $editAll.toggleClass("hidden");
        });
    };
    WorkoutSummary.edit = function(e) {
        e.preventDefault();
        if (isCustom || isOcr) {
            window.location.href = "/activity/workout/add-custom/" + workoutID;
        } else {
            e.preventDefault();
            var d = new $.Deferred(), validIntensity = new RegExp("low|medium|high"), intensityLevel = $intensityLevel.text().toLowerCase(), intensityMeasure = $intensityMeasure.text().toLowerCase(), caloriesInput = $caloriesNumInput.val();
            errorHandler.hideError();
            if ($(this).hasClass("save") && (caloriesInput !== $caloriesMeasure.text() || intensityLevel !== intensityMeasure) && validIntensity.test(intensityLevel)) {
                d = WorkoutSummary.save(caloriesInput, intensityLevel);
            } else {
                if (!caloriesInput.length) {
                    $caloriesNumInput.val(parseInt($caloriesMeasure.text(), 10) || "");
                }
                $intensityLevel.text(validIntensity.test(intensityMeasure) ? intensityMeasure : "HOW HARD DID YOU GO?");
                WorkoutSummary.radioButtonSetActive(intensityMeasure);
                d.resolve();
            }
            d.always(function() {
                $editAll.toggleClass("hidden");
                $hiddenIntensity.toggleClass("inactive");
                $duration.toggleClass("hidden");
            });
        }
    };
    WorkoutSummary.save = function(calories, intensityLevel) {
        errorHandler.showLoader();
        return EQ.Helpers.putService("/v2.6/me/workouts/" + workoutID + "/update-calories/" + calories + "/" + intensityLevel.toLowerCase()).done(function() {
            debug("calories", calories);
            $caloriesMeasure.text(calories);
            $intensityMeasure.text(intensityLevel);
        }).fail(function(d) {
            debug("server error", d.responseJSON);
            errorHandler.showError();
        }).always(function() {
            errorHandler.hideLoader();
        });
    };
    WorkoutSummary.validate = function(e) {
        return !(e.which > 57 && (e.which < 96 || e.which > 105));
    };
    WorkoutSummary.updateIntensity = function() {
        var num = parseInt($caloriesNumInput.val(), 10), $radioHi = $intensityRadioBtns.eq(2), $radioMed = $intensityRadioBtns.eq(1), $radioLow = $intensityRadioBtns.eq(0);
        if (num >= parseInt($radioHi.val(), 10)) {
            $radioHi.prop("checked", true);
            $intensityLevel.text($radioHi.attr("id").toLowerCase());
        } else if (num >= parseInt($radioMed.val(), 10)) {
            $radioMed.prop("checked", true);
            $intensityLevel.text($radioMed.attr("id").toLowerCase());
        } else {
            $radioLow.prop("checked", true);
            $intensityLevel.text($radioLow.attr("id").toLowerCase());
        }
    };
    WorkoutSummary.updateValue = function() {
        $(this).val(parseInt($(this).val().substr(0, 4), 10) || "");
    };
    WorkoutSummary.updateCalories = function() {
        $caloriesNumInput.val($(this).val());
    };
    WorkoutSummary.radioButtonHighlight = function() {
        WorkoutSummary.radioButtonSetActive($(this).attr("id"));
    };
    WorkoutSummary.radioButtonSetActive = function(text) {
        $intensityRadioBtns.prop("checked", false).parent().removeClass("active");
        $intensityRadioBtns.filter("#" + text).prop("checked", true).parent().addClass("active");
    };
    WorkoutSummary.updateCaloriesText = function() {
        $intensityLevel.text($(this).attr("id"));
    };
    WorkoutSummary.removeClass = function(e) {
        e.preventDefault();
        App.loadComponent("confirm-modal", $("#confirmModalTemplate"), {
            callback: function(confirm) {
                if (confirm) {
                    var ENDPOINT = APIEndpoint + "/me/calendar/cancel/" + workoutID + "?removeRecurring=false", ev = e;
                    errorHandler.hideError();
                    errorHandler.showLoader();
                    $.ajax({
                        type: "DELETE",
                        url: ENDPOINT,
                        contentType: "application/json",
                        xhrFields: {
                            withCredentials: true
                        },
                        dataType: "json"
                    }).done(function(data) {
                        debug("[REMOVECLASS OK]", data);
                        errorHandler.hideLoader();
                        WorkoutSummary.showMessage("remove", 4e3, function() {
                            WorkoutSummary.backButton(ev);
                        });
                    }).fail(function(d) {
                        debug("server error", d.responseJSON);
                        errorHandler.showError();
                    }).always(function() {
                        errorHandler.hideLoader();
                    });
                }
            }
        });
    };
    WorkoutSummary.backButton = function(e) {
        e.preventDefault();
        if (!isCustom && history.length && !isOcr) {
            history.go(-1);
        } else {
            location.replace("/activity#WORKOUTS/" + workoutDate);
        }
    };
    WorkoutSummary.switchACCE = function() {
        Backbone.Events.trigger("automatic-calories-overlay:open");
    };
    WorkoutSummary.showMessage = function(type, timeout, cb) {
        switch (type) {
          case "acce":
            $overlayBox.text("Class and calories have been added to your calendar and activity");
            break;

          case "remove":
            $overlayBox.text("Workout Removed");
            break;
        }
        $overlayBox.addClass("active");
        setTimeout(function() {
            $overlayBox.removeClass("active");
            if (typeof cb === "function") {
                cb();
            }
        }, timeout);
    };
})(window.App);

(function(App) {
    "use strict";
    var isLocal = location.host.indexOf("local.equinox.com") === 0 || location.host.indexOf("local-web.equinox.com") === 0 ? true : false;
    var assetBaseUrl = $("body").data("asset-base-url") || "", version = $("body").data("app-version") ? "?v=" + $("body").data("app-version") : "";
    var createComponent = function(component, $el, options) {
        try {
            return App.Components[component]($el, options);
        } catch (e) {
            console.error("data-component failed to export as a function", e.stack);
        }
    };
    App.renderComponents = function(selector) {
        var $selector = $(selector), components = [], requireComponents = [];
        $selector.find("[data-component]").each(function(i, el) {
            var $el = $(el), component = $el.data("component"), options = $el.data("component-options"), devAssets = assetBaseUrl + "/assets/js/app/components/" + component + ".js" + version, prodAssets = assetBaseUrl + "/assets/js/app/components/min/" + component + ".js" + version;
            try {
                debug("[DataComponent] Loading: " + component + " component.");
                var C = {
                    filename: isLocal ? devAssets : prodAssets,
                    $el: $el,
                    component: component,
                    options: options
                };
                components.push(C);
                requireComponents.push(C.filename);
            } catch (e) {
                console.error("data-component not found: " + component, e.stack);
            }
        });
        try {
            require(requireComponents, function() {
                _.forEach(components, function(c) {
                    createComponent(c.component, c.$el, c.options || {});
                });
            });
        } catch (e) {
            console.error("data-component not found", e.stack);
        }
    };
    App.loadComponent = function(component, $el, options, callback) {
        debug("[DataComponent] Loading: " + component + " component.");
        require([ assetBaseUrl + "/assets/js/app/components/min/" + component + ".js" + version ], function() {
            createComponent(component, $el, options || {});
            if (callback && typeof callback === "function") {
                callback.call(component);
            }
        });
    };
    App.renderComponents("body");
    _.extend(Backbone.View.prototype, Backbone.Events, {
        renderComponents: function($el) {
            App.renderComponents($el);
        }
    });
})(window.App);

window.App.Events.trigger("loaded");

(function() {
    "use strict";
    $(function() {
        if (EQ.Helpers.getDevicePlatform() === "android") {
            $("input[maxlength]").each(function() {
                var $input = $(this), max = $input.attr("maxlength");
                $input.removeAttr("maxlength");
                $input.on("keydown", function(evt) {
                    var ignore = [ 8, 9, 13, 33, 34, 35, 36, 37, 38, 39, 40, 46 ], isExtraKey = evt.altKey || evt.ctrlKey;
                    if ($.inArray(evt.keyCode, ignore) === -1 && !isExtraKey) {
                        return $input.val().length < max;
                    }
                });
                $input.on("keyup", function() {
                    var value = $input.val();
                    if (value.length > max) {
                        $input.val(value.substr(0, max));
                    }
                });
            });
        }
        if (window.location.hash === "#flushGeoCache") {
            EQ.Geo.flushCache();
            console.log("[GLOBAL] Flushing Geo Cache");
        }
        EQ.Helpers.fixRegionProperty();
        $('iframe[title="Google conversion frame"]').css("display", "none");
    });
})(window);
//# sourceMappingURL=app.min.js.map
/*! local_env mindoro v0.7.0 - 2015-02-27 02:02:34 */
